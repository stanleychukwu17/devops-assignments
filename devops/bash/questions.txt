1.  - Read: why use bash for shell scripting
    - how do you create and run a bash script?

2.  variables in bash
    - create a variable.sh script
    - add a variable named "greet"
    - execute the script to print out the value of greet on the terminal
    - add variable named "welcome" with value "Hello world, bash rules your terminal"
    - with $welcome, search and replace the word "bash" with "makefile"
    - slice "Hello world" from the $welcome variable
    - slice "rules your" from the $welcome variable

3.  if greeting="Hello world"
    - Difference btw | echo ${greeting} | and | echo $(greeting) |
    - Difference btw | echo $greeting | and | echo ${greeting} |

4.  Arrays in bash
    - how do you declare an array
    - how do your retrieve/display all the items in an array
    - how do you retrieve/display specific items in an array
    - how do you retrieve and display all indexes of an array

5.  Arithmetic calculations
    - show the 3 ways of doing Arithmetic calculations
    - assign each 3 to a variable and display their value in the terminal
    - do not assign them to a variable, just display them in the terminal

6.  standard input, output & error
    - what are the values for each of the above
    - how do you redirect standard input from a text file
    - how do you redirect standard output & standard error into a file
    - how do you redirect standard output & error into null

7.  Arguments in bash
    - how do you capture/use arguments in bash
    - how do you pass arguments to your script when running the script
    - how do you capture all arguments in bash
    - what is the difference btw $@ and $*
    - Read: "$@" vs $@ 
    - task: using for loop, loop through all arguments received and echo them

8.  Exit status in bash
    - what is a successful exit status
    - what is a non-successful exit status (you know the range) ?
    - Read: list of common exit codes
    - how do you know your last exit status
        - see some examples

9.  if-else conditions in bash
    - what is the syntax for if-else conditions
    - how do you check:
        equal to, not equal to, greater than, less than, greater than or equal to,
        less than or equal to, regex matching
    - Do some mathematical comparison of:
        1 equals 1, $var equals 2, $var less than 5
    - use arguments in your comparison
        arg-1 not equal to 10, arg-1 greater than arg-2
    - string comparison, strA not equal to strB
        Read: tip when comparing strings

10. if-else for files
    - how do you check if a file:
        exist, is readable, is a symlink, is a directory, is writeable,
        is a file, file size greater than 0bytes
    - Read: difference btw [-f file] and [-e file]
    - Task: check if hello.sh exist, if not create it
            - use ls -l to see if the file(i.e hello.sh) permissions
            - add executable permission to the file & verify the file is executable

11. Read: read the tip on executing of scripts from any location

12. while loops in bash
    - write the syntax for a while loop
    - write an if-else condition inside a while loop
    - task: use the while loop to number the names in names.txt file
    - how do you do an infinite while loop

13. For loops in Bash
    - syntax of for loops