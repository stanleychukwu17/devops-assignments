full_revision: 27 May 2025
full_revision: 6 June 2025

1.  how do you create and run a bash script?

2.  variables in bash
    - create a variable.sh script
    - add a variable named "greet"
    - execute the script to print out the value of greet on the terminal
    - add variable named "welcome" with value "Hello world, bash rules your terminal"
    - with $welcome, search and replace the word "bash" with "makefile"
    - slice "Hello world" from the $welcome variable
    - slice "rules your" from the $welcome variable
    - delete the variable.sh file

3.  if greeting="Hello world"
    - Difference btw | echo ${greeting} | and | echo $(greeting) |
    - Difference btw | echo $greeting | and | echo ${greeting} |

4.  Arrays in bash
    - how do you declare an array
    - how do your retrieve/display all the items in an array
    - how do you retrieve/display specific items in an array
    - how do you retrieve and display all indexes of an array
    - Read: how do you get the length of an array
    - task: add a variable called "school", add 3 schools you've been to in the array, now use
      a for loop to print out each item in the array

5.  Arithmetic calculations
    - show the 3 ways of doing Arithmetic calculations

6.  standard input, output & error
    - what are the values for each of the above
    - how do you redirect standard input from a text file
    - how do you redirect standard output into a file
    - how do you redirect standard error into a file
    - how do you redirect standard output & error into null

7.  Arguments in bash
    - how do you capture/use arguments in bash
    - how do you pass arguments to your script when running the script
    - how do you capture all arguments in bash
    - what is the difference btw $@ and $*
    - what is $0
    - task: using for loop, loop through all arguments received and echo them

8.  Exit status in bash
    - what is a successful exit status
    - what is a non-successful exit status (you know the range)
    - Read: list of common exit codes
    - how do you know your last exit status
        - the command
        - see some examples

9.  if-else conditions in bash
    - what is the syntax for if-else conditions
        - also give an example
    - how do you check:
        equal to, not equal to, greater than, less than, greater than or equal to,
        less than or equal to, regex matching
    - Do some mathematical comparison of:
        1 equals 1, $var equals 2, $var less than 5
    - string comparison, strA not equal to strB
        Read: tip when comparing strings

10. if-else for files
    - how do you check if a file:
        exist, is readable, is a symlink, is a directory, is writeable,
        is a file, is executable, file size greater than 0bytes
    - Read: difference btw [-f file] and [-e file]
    - Task: check if hello.sh exist, if not create it
        - use ls -l to see if the file(i.e hello.sh) and create it
        - use [-f file] to check if hello.sh exist and create it

11. while loops in bash
    - write the syntax for a while loop, give an example of while number is less than 5: do something
    - write an if-else condition inside a while loop
    - how do you do an infinite while loop
    - task: use the while loop to number the names in names.txt file

12. For loops in Bash
    - syntax of for loops
    - loop through names.txt
    - loop through an array
    - loop through all arguments
    - loop through each arguments

13. Read: switch cases in bash
    - syntax
    - example

14. Functions is bash
    - syntax for functions in bash and give an example
    - calling functions with arguments
    - returning values from a function
    - using default when no argument is passed
    - recursive functions

15. accepting values from users
    - 1st: Accepting a value:
    - 2nd: Accepting multiple values:
    - 3rd: Using -p option with read (Inline Prompt):

16. Read: colors in bash
    - initial explanation on coloring in bash
    - common color numbers/codes
    - storing color codes in variables
    - some tips
    - adding background color to the text

17. explain set -euo pipefail

18. xargs in bash
    - explain this command:
    echo "${ec2_public_ip}" | xargs -I {} curl http://{}

19. curl in bash
    - explain this command:
    echo "example.com" | xargs -I {} curl -s -o /dev/null -w "%{http_code}\n" http://{}

20. look at this file:
    ./practice/1-nginx-entrypoint/docker-entrypoint-4-nginx.sh*
    - explain what is going on
      see explanation: ./practice/1-nginx-entrypoint/explanation.txt
    - then write the code by yourself while looking at the code

21. - Read: how do you generate random numbers
    - Read: How do you generate random numbers within a certain range