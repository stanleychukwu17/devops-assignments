1.  - Read: why use bash for shell scripting
        shell scripting is the process of writing and executing scripts in a shell (command-line interpreter)
        to automate tasks. it involves using scripting languages such as bash to write series of commands and
        instructions that can be executed sequentially. shell scripts are commonly used in unix-like operating
        systems for system administration and automation purposes

        here are some of the task commonly performed using shell scripts
        1. File and directory management
        2. System administration
        3. Data processing
        4. Automaton of repetitive tasks
        5. Application and service management: starting, stopping and monitoring of application & services.
        6. System monitoring and reporting: collecting system information like cpu usage, disk space and then using
            them to generate report/warning based on predefined thresholds
        7. Network-related tasks: automating network configuration, monitoring network connectivity and performing
            network diagnostics are some common network related task
        8. Web related task: automating website maintenance, crawling and scrapping web content, interacting with
            web api and performing automated testing
        9. Task scheduling: creating cron jobs to run at specific times

    - how do you create and run a bash script?
        touch hello_world.sh
        chmod +x hello_world.sh
        ./hello_world.sh


2.  see ./answers/2-variables.sh

3.  if greeting="Hello world"
    - Difference btw | echo ${greeting} | and | echo $(greeting) |
        In bash, the difference between echo ${greeting} and echo $(greeting) lies in how the
        expressions are evaluated:

        1. echo ${greeting}:
            This is the correct way to access the value of the variable greeting.
            ${greeting} expands to the value stored in the greeting variable.
            greeting="hello world", it will output hello world.

        2. echo $(greeting):
            This is incorrect syntax for referencing a variable.
            The $() syntax is used for command substitution, meaning it is used to execute a command
                and capture its output.
            For example, echo $(ls) would run the ls command and print its output.
            Since greeting is not a command, this will result in an error like "command not found: greeting".

    - Difference btw | echo $greeting | and | echo ${greeting} |
        Both of them are the same thing, but ${greeting} allows for more

        Here's the breakdown:
        - echo $greeting:
            It's a shorthand form that is equivalent to echo ${greeting} and directly expands to
            the value of the variable greeting.

        - echo ${greeting}:
            This is the long form, but it works exactly the same as $greeting.
            The curly braces {} are optional unless you need to disambiguate the variable name when it's followed
            by other characters that could be interpreted as part of the variable name.
            e.g:
                echo "Message: ${greeting}!"
                echo "${greeting}123"

4.  Arrays in bash
    - how do you declare an array
        names=("John" "Jane" "Bob" "Stanley")
    - how do your retrieve/display all the items in an array
        echo "${names[@]}"
    - how do you retrieve/display specific items in an array
        echo ${names[0]}
        echo ${names[1]}
        echo ${names[2]}
    - how do you retrieve and display all indexes of an array
        echo "${!names[@]}"

5.  Arithmetic calculations
    - show the 3 ways of doing Arithmetic calculations
        - the most reliable way:
          total_1=$((5+7))
          total_2=$((10*10))
          total_3=$((total_1+total_2))
          echo "${total_1} + ${total_2} = $total_3"

        - other ways but prone to error 
          expr 7 + 10
          echo "7 + 10" | bc

6.  standard input, output & error
    - what are the values for each of the above
        STDIN(0)
        STDOUT(1)
        STDERR(2)

    - how do you redirect standard input from a text file
        cat < pop.txt
        tail -5 < pop.txt # show the last 5 lines in the pop.txt document
        head -50 < pop.txt # show the first 50 lines in the pop.txt document

    - how do you redirect standard output & standard error into a file
        standard output:
        echo "${total_1} ${total_2}" 1>> pop.txt
        echo "we gon make it by GOD'S grace " > stanley.txt {you don't need to add the 1}
        cat pop.txt variables.sh > combined.txt
        -
        standard error:
        unknown_command 2> error.log

    - how do you redirect standard output & error into null
        ls &> /dev/null - redirects both the STDOUT and STDERR
        ls 1> /dev/null - redirects only STDOUT to null
        -
        fake_command 2> error.log - redirects only STDERR to error log
        fake_command 2> /dev/null - redirects only STDERR to null

7.  Arguments in bash
    - how do you capture/use arguments in bash
        $1 - 1st argument
        $2 - 2nd argument
        $3 - 3rd argument
        $....

        arg1=$1
        echo ${arg1}

    - how do you pass arguments to your script when running the script
        ./script.sh arg1 arg2 arg3 arg...

    - how do you capture all arguments in bash
        $@ or $*

    - what is the difference btw $@ and $*
        1. $@:
            Without quotes: $@ behaves exactly the same as $*, representing all positional parameters.

            With quotes: "$@" treats each argument as a separate quoted string. This means that each
                          argument will remain intact, even if it contains spaces. For example, if you
                          pass the arguments "one" and "two words" to a script, "$@" would give:
                          -> one "two words"
                          So, each argument is treated as a separate word.

        2. $*:
            Without quotes: $* behaves the same as $@, representing all positional parameters.
            With quotes: "$*" concatenates all arguments into a single string, separating them by the
            first character of the IFS (Internal Field Separator, usually a space).
            For example, with arguments one and "two words", "$*" would give:
            -> one two words
            It treats all arguments as one combined string.

    - task: using for loop, loop through all arguments received and echo them
        see ./answers/7.5-arguments.sh

