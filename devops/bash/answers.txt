1.  - Read: why use bash for shell scripting
        shell scripting is the process of writing and executing scripts in a shell (command-line interpreter)
        to automate tasks. it involves using scripting languages such as bash to write series of commands and
        instructions that can be executed sequentially. shell scripts are commonly used in unix-like operating
        systems for system administration and automation purposes

        here are some of the task commonly performed using shell scripts
        1. File and directory management
        2. System administration
        3. Data processing
        4. Automaton of repetitive tasks
        5. Application and service management: starting, stopping and monitoring of application & services.
        6. System monitoring and reporting: collecting system information like cpu usage, disk space and
            then using them to generate report/warning based on predefined thresholds
        7. Network-related tasks: automating network configuration, monitoring network connectivity
            and performing network diagnostics are some common network related task
        8. Web related task: automating website maintenance, crawling and scrapping web content,
            interacting with web api and performing automated testing
        9. Task scheduling: creating cron jobs to run at specific times

    - how do you create and run a bash script?
        touch hello_world.sh
        chmod +x hello_world.sh
        ./hello_world.sh

2.  see ./answers/2-variables.sh

3.  if greeting="Hello world"
    - Difference btw | echo ${greeting} | and | echo $(greeting) |
        In bash, the difference between echo ${greeting} and echo $(greeting) lies in how the
        expressions are evaluated:

        1. echo ${greeting}:
            This is the correct way to access the value of the variable greeting.
            ${greeting} expands to the value stored in the greeting variable.
            greeting="hello world", it will output hello world.

        2. echo $(greeting):
            This is incorrect syntax for referencing a variable.
            The $() syntax is used for command substitution, meaning it is used to execute a command
                and capture its output.
            For example, echo $(ls) would run the ls command and print its output.
            Since greeting is not a command, this will result in an error like "command not found: greeting".

    - Difference btw | echo $greeting | and | echo ${greeting} |
        Both of them are the same thing, but ${greeting} allows for more

        Here's the breakdown:
        - echo $greeting:
            It's a shorthand form that is equivalent to echo ${greeting} and directly expands to
            the value of the variable greeting.

        - echo ${greeting}:
            This is the long form, but it works exactly the same as $greeting.
            The curly braces {} are optional unless you need to disambiguate the variable name when it's
            followed by other characters that could be interpreted as part of the variable name.
            e.g:
                echo "Message: ${greeting}!"
                echo "${greeting}123"

4.  Arrays in bash
    - how do you declare an array
        names=("John" "Jane" "Bob" "Stanley")
    - how do your retrieve/display all the items in an array
        echo "${names[@]}"
    - how do you retrieve/display specific items in an array
        echo ${names[0]} # first item
        echo ${names[1]} # second item
        echo ${names[2]} # third item
    - how do you retrieve and display all indexes of an array
        echo "${!names[@]}"
    - add a variable called "school", add 3 schools you've been to in the array, now use
      a for loop to print out each item in the array
        names=("jewel model school" "whole person education" "east ukrainian national university")

        for i in "${names[@]}"; do
            echo $i
        done

5.  Arithmetic calculations
    - show the 3 ways of doing Arithmetic calculations
        - the most reliable way:
          total_1=$((5+7))
          total_2=$((10*10))
          total_3=$((total_1+total_2))
          echo "${total_1} + ${total_2} = $total_3"

        - other ways but prone to error 
          expr 7 + 10
          echo "7 + 10" | bc {works in a linux environment, but will not work in git bash windows}

6.  standard input, output & error
    - what are the values for each of the above
        STDIN(0)
        STDOUT(1)
        STDERR(2)

    - how do you redirect standard input from a text file
        cat < pop.txt
        tail -5 < pop.txt # show the last 5 lines in the pop.txt document
        head -50 < pop.txt # show the first 50 lines in the pop.txt document

    - how do you redirect standard output into a file
        standard output:
        echo "we gon make it by GOD'S grace " > stanley.txt
        echo "22 in 2026" 1>> stanley.txt {but you don't need to add the 1} 
        cat pop.txt variables.sh > combined.txt

    - how do you redirect standard error into a file
        standard error:
        unknown_command 2> error.log

    - how do you redirect standard output & error into null
        ls &> /dev/null - redirects both the STDOUT and STDERR
        ls 1> /dev/null - redirects only STDOUT to null
        -
        fake_command 2> error.log - redirects only STDERR to error log
        fake_command 2> /dev/null - redirects only STDERR to null

7.  Arguments in bash
    - how do you capture/use arguments in bash
        $1 - 1st argument
        $2 - 2nd argument
        $3 - 3rd argument
        $....
        $@ - all arguments

        arg1=$1
        echo ${arg1}

    - how do you pass arguments to your script when running the script
        ./script.sh arg1 "arg 2" "arg 3" arg...

    - how do you capture all arguments in bash
        $@ or $*

    - what is the difference btw $@ and $*
        1. $@:
            Without quotes: $@ behaves exactly the same as $*, representing all positional parameters.

            With quotes: "$@" treats each argument as a separate quoted string. This means that each
                          argument will remain intact, even if it contains spaces. For example, if you
                          pass the arguments "one" and "two words" to a script, "$@" would give:
                          -> one "two words"
                          So, each argument is treated as a separate word.

        2. $*:
            Without quotes: $* behaves the same as $@, representing all positional parameters.
            With quotes: "$*" concatenates all arguments into a single string, separating them by the
            first character of the IFS (Internal Field Separator, usually a space).
            For example, with arguments one and "two words", "$*" would give:
            -> one two words
            It treats all arguments as one combined string.

    - task: using for loop, loop through all arguments received and echo them
        see ./answers/7-arguments.sh

8.  Exit status in bash
    - what is a successful exit status
        a successful exit is of status "0", i.e "exit(0)"

    - what is a non-successful exit status (you know the range)
        a non-zero exit status indicates an error or failure

        exit(1) - This is a general error. It doesn't specify what kind of error occurred,
                  but it signals a failure. 

        exit(2 to 255): These can be used for specific error codes defined by the program, often
                  to indicate particular types of failures or issues

    - Read: list of common exit codes
        1 to 125: General errors, user-defined exit codes
        126: Command found, but not executable
        127: Command not found
        128 to 255: System-related errors, often signal terminations

    - how do you know your last exit status
        - the command
            echo $?

        - see some examples
            $ ls && echo $?
            -> 0

            $ ldi && echo $? # non_existent_command
            -> 127

            $ calc=$((1/0)) && echo $?
            -> 1/0: division by 0 (error token is "1")
               1

            $ calc=$((1/10)) && echo $?
            -> 0

            $ func () {} && echo $?
            -> 2

9.  if-else conditions in bash
    - what is the syntax for if-else conditions
        if [ condition ]; then
            # code to execute if condition is true
        elif [ another_condition ]; then
            # code to execute if the first condition is false and this one is true
        else
            # code to execute if none of the conditions are true
        fi

        e.g:
            x=10
            if [ $x -gt 5 ]; then
                echo "x is greater than 5"
            elif [ $x -eq 5 ]; then
                echo "x is equal to 5"
            else
                echo "x is less than 5"
            fi

    - how do you check:
        equal to: [==] or [-eq]
        not equal to: [!=] or [-ne]
        greater than: [-gt]
        less than: [-lt]
        greater than or equal to: [-ge]
        less than or equal to: [-le]
        regex matching: [[=~]]

    - Do some mathematical comparison of:
        1 equals 1: [ 1 == 1 ] or [ 1 -eq 1]
        $var equals 2: [ $var -eq 2 ]
        $var less than 5 [ $var -lt 5 ]

    - string comparison, strA not equal to strB
        Read: tip when comparing strings
        e.g:
            strA="Hello world"
            strB="Hello world"

            # the below will fail, because "-eq" should be used only for integers
            if [ $strA -eq $strB ]; then
                echo "all is well"
            if

            # the below will pass, use "==" should be used for strings
            if [ "$strA" == "$strB" ]; then
                echo "all is well"
            elif [ "$strA" != "$strB" ]; then
                echo "they are not equal"
            if

        see: ./answers/9-if-else.sh

10. if-else for files
    - how do you check if a file:
        exist: [-e file]
        is readable: [-r file]
        is a symlink: [-h file]
        is a directory: [-d file]
        is writeable: [-w file]
        is a file: [-f file]
        file size greater than 0bytes: [-s file]

    - Read: difference btw [-f file] and [-e file]
        [-f file]: This check if a file exist and if it is a regular file
            (i.e it must not be a directory or a symbolic link)
        
        [-e file]: this checks to make sure that a file exist regardless of it's type,
            it might be of type: directory, regular file, symbolic link e.t.c

    - Task: check if hello.sh exist, if not create it
        see ./answers/10-i-else-for-files.sh

11. while loops in bash
    - write the syntax for a while loop
        while [ condition ]; do
            # expressions
        done

        e.g:
        count=1
        while [ $count -le 5 ]; do
            echo "Count is: $count"
            ((count++))  # Increment the count
        done

    - write an if-else condition inside a while loop
        while [ condition ]; do
            if [ condition ]; then
                # expression
            else
                # expression
            fi
        done

    - how do you do an infinite while loop
        while true; do
            # Your commands here
        done

    - task: use the while loop to number the names in names.txt file
        see: ./answers/11-while-loops.sh

12. For loops in Bash
    - syntax of for loops
        for arg in [list]; do
            expression
        done

    - loop through names.txt
        for i in `cat names.txt`; do
            echo "$i"
        done

        for i in $(cat names.txt); do
            echo "$i"
        done

    - loop through an array
        names=(chukwu stanley edward)
        for i in "${names[@]}"; do
            echo $i
        done

    - loop through all arguments
        for i in "$@"; do
            echo $i
        done

    - loop through each arguments
        for i in $1 $2 $3; do
            echo $i
        done

13. Read: switch cases in bash
    - syntax
        case "$variable" in
            condition1)
                # command to execute
                ;;
            condition2)
                # command to execute
                ;;
            *)
                # command to execute if no pattern matches (optional)
                ;;
            esac

    - example
        echo "Enter your name :"
        read name
        case $name in
            "root")
                echo "you have access to root"
                ;;
            "stanley")
                echo "you do not have access to root"
                ;;
            *)
                echo "unknown user entered"
                ;;
        esac

14. Functions is bash
    - syntax for functions in bash and give an example
        function <name_of_function> () {
            # command to execute
        }
        or
        <name_of_function> () {
            # command to execute
        }

        e.g:
        hello () {
            echo "hello world"
            ls
        }
        hello # calling the function

    - see all the other answers
        see ./answers/14-functions.sh

15. accepting values from users
    - 1st: Accepting a value:
        echo "Enter your name:"
        read name
        echo "Hello, $name!"

        - the ":" in the echo statement will prompt the user to enter a value in the terminal
        - read name: This waits for the user to input a value and stores it in the variable name

    - 2nd: Accepting multiple values:
        echo "Enter your first and last name:"
        read first_name last_name
        echo "Hello, $first_name $last_name!"

    - 3rd: Using -p option with read (Inline Prompt):
        You can also display a prompt inline using the -p option with the read command.
        -
        read -p "Enter your age: " age
        echo "You are $age years old."

16. Read: colors in bash
    - initial explanation on coloring in bash
        You can color the outputs in your terminal from your bash script. To do this, you use the -e flag in 
        your echo command {-e = escape}

        e.g:
        echo -e "\e[30m Bash scripting \e[0m"

        \e[<color_code>m - is used to open and close the coloring 
        30 - is the color code
        0 - is used to close the coloring

    - common color numbers/codes
        30 = Black
        31 = Red
        32 = Green
        33 = Brown
        34 = Blue
        35 = Purple
        36 = light blue
        37 = light gray

    - storing color codes in variables
        red="\e[31m"
        end="\e[0m"
        echo -e "${red} Bash scripting ${end}"

    - some tips
        - \e[1;31m : 1 in front of every color code to make it bold
        - \e[3;31m : 3 will make the text italic
        - \e[4;31m : 4 will underline the text
        - \e[5;31m : 5 & 6 will make the text blink
        - \e[7;31m : 7 will highlight the background color of the text
        - \e[9;31m : 9 will strike through the text
    
    - adding background color to the text
        31 = Red; 41 = Red background color i.e: \e[41m
        32 = Green; 42 = Green background color i.e: \e[42m
        33 = Brown; 43 = Brown background color i.e: \e[43m
        -
        \e[1;42m = bold text and background color applied

17. explain set -euo pipefail
    this command is always used in bash scripts for ci/cd pipeline and automation. The command helps to
    prevent subtle bugs.

    - set -e (exit on error):
        this makes the script exit immediately if any command exits with a non-zero status (i.e it failed),
        it helps to stop the script early when something goes wrong, instead of continuing and potentially
        causing further errors or undesired behavior
    
    - set -u (treat unset variables as errors):
        this ensures that any attempt to use an unset variable will cause the script to exit with an error
    
    - set -o pipefail (fail on pipe errors):
        exits the script if any command in a pipeline fails

18. xargs in bash
    - echo "${ec2_public_ip}":
      This command prints the value of the variable ec2_public_ip to standard output.

    - | (pipe):
      The output of the echo command is sent as input to the next command (xargs).
    
    - xargs -I {} curl http://{}
      xargs: A command that builds and executes command lines from input.
      -I {}: Specifies {} as the replacement string. For each line of input, xargs replaces {} in
            the command with that input.
      curl http://{}: This is the command template. {} will be replaced by the input (e.g., an IP or domain).

    e.g:
    Multiple IPs:
        echo -e "1.2.3.4\n5.6.7.8" | xargs -I {} curl http://{}
        output:
        curl http://1.2.3.4
        curl http://5.6.7.8


19. curl in bash
    - explain this command:
    -
    curl:
        a command-line tool used to transfer data to or from a server, using protocols like HTTP, HTTPS, FTP, etc
    -s:
        silent mode, hides a-lot of unnecessary info and displays only the information you asked for,
        in this case we asked for -w to print out the http_code
    -o /dev/null:
        Output redirected to null, This discards the actual content of the HTTP response (the body)
    -w "%{http_code}\n":
        Write out HTTP status code:
        -w (or --write-out) tells curl to print certain information after the transfer.
        %{http_code} is a placeholder that curl replaces with the HTTP status code (e.g., 200, 404, 500).
        \n ensures the output is followed by a newline.
    http://{}
        The {} is a placeholder used by xargs.
        xargs replaces it with the value from echo (in this case, example.com), resulting in:
            curl -s -o /dev/null -w "%{http_code}\n" http://example.com
    -
    This is especially useful for:
        Monitoring website health
        Checking if a site is up (e.g., 200 OK vs 503 Service Unavailable vs 404 page not found)




