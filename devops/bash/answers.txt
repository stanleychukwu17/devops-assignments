1.  - Read: why use bash for shell scripting
        shell scripting is the process of writing and executing scripts in a shell (command-line interpreter)
        to automate tasks. it involves using scripting languages such as bash to write series of commands and
        instructions that can be executed sequentially. shell scripts are commonly used in unix-like operating
        systems for system administration and automation purposes

        here are some of the task commonly performed using shell scripts
        1. File and directory management
        2. System administration
        3. Data processing
        4. Automaton of repetitive tasks
        5. Application and service management: starting, stopping and monitoring of application & services.
        6. System monitoring and reporting: collecting system information like cpu usage, disk space and then using
            them to generate report/warning based on predefined thresholds
        7. Network-related tasks: automating network configuration, monitoring network connectivity and performing
            network diagnostics are some common network related task
        8. Web related task: automating website maintenance, crawling and scrapping web content, interacting with
            web api and performing automated testing
        9. Task scheduling: creating cron jobs to run at specific times

    - how do you create and run a bash script?
        touch hello_world.sh
        chmod +x hello_world.sh
        ./hello_world.sh


2.  see ./answers/2-variables.sh

3.  if greeting="Hello world"
    - Difference btw | echo ${greeting} | and | echo $(greeting) |
        In bash, the difference between echo ${greeting} and echo $(greeting) lies in how the
        expressions are evaluated:

        1. echo ${greeting}:
            This is the correct way to access the value of the variable greeting.
            ${greeting} expands to the value stored in the greeting variable.
            greeting="hello world", it will output hello world.

        2. echo $(greeting):
            This is incorrect syntax for referencing a variable.
            The $() syntax is used for command substitution, meaning it is used to execute a command
                and capture its output.
            For example, echo $(ls) would run the ls command and print its output.
            Since greeting is not a command, this will result in an error like "command not found: greeting".

    - Difference btw | echo $greeting | and | echo ${greeting} |
        Both of them are the same thing, but ${greeting} allows for more

        Here's the breakdown:
        - echo $greeting:
            It's a shorthand form that is equivalent to echo ${greeting} and directly expands to
            the value of the variable greeting.

        - echo ${greeting}:
            This is the long form, but it works exactly the same as $greeting.
            The curly braces {} are optional unless you need to disambiguate the variable name when it's followed
            by other characters that could be interpreted as part of the variable name.
            e.g:
                echo "Message: ${greeting}!"
                echo "${greeting}123"





