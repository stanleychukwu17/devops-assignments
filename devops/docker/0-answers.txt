Group 1
1.  docker build -t <image_name> <path_to_locate_dockerfile>
    docker build -t python_image ./
    docker build -t python_image -f Dockerfile.nodejs.prod

2.  docker build -t <image_name>:<tag> <path_to_locate_dockerfile>
    docker build -t python_image:v1.0 ./
    docker build -t python_image -f Dockerfile.nodejs.prod

3.  docker images
    docker image ls

4.  - go to hub.docker.com
    - search for node, select the first verified node result that comes up with 1B+ downloads
    - click on tags tab
    - in the [filter tag input], search for "alpine" and select any image you want

5.  docker image rm <image_name>
    docker rmi <image_name>

6.  docker image rm image_1 image_2 image_3 {...}

7. docker image rm $(docker image ls -q)
    docker rmi $(docker images -q)
    --
    docker image prune -f {Remove all dangling images (-f = by force (without confirmation))}
    docker image prune -a {Remove all unused images (with confirmation):}
        Unused images are those that are not currently associated with any containers, including those that are
        tagged.
        Note: Unlike the previous command, this will delete both dangling images and images that are not currently
        in use but might still have tags.
    docker image prune -a -f {Remove all unused & dangling images (without confirmation):}

8.  - what can you say about using the COPY command
      The COPY command is used to copy files & directories from the host machine into the Docker image
      e.g: COPY <file> <working-directory-in-the-image>

    - copy multiple files
      COPY package.json package-lock.json pnpm-lock.yml ./

    - using regex in package.json copy
      COPY package*.json ./ {
            COPY *.txt *(.js|.ts) picture* ./
            The COPY instruction in Docker does not support advanced pattern matching
            or glob patterns like *, ?, or complex regex patterns directly.
        }

    - copy files with white space in their names
      COPY ["file with space.txt", "."]

    - copying everything
      COPY . ./

    - difference btw COPY and ADD
      ADD and COPY commands both carry out the same task, but the ADD command can do a little bit more {
        1. ADD can copy from a url e.g ADD https://github.com/stanley/come.txt ./
        2. ADD can copy from a zipped file into your working directory e.g ADD code.tar ./
           it will unzip the file and copy the contents
    }

9. RUN addgroup -S app && adduser -S -G app app {
    you must put -S before -G, it is the correct way of doing it, you're saying create a -S system user called
    "app" and add the user to a group -G called "app"
}

10. USER app

11. COPY --chown=app:app . ./
    RUN chown -R app:app /app
    {
        Use COPY --chown=app:app . ./ when you are copying files and want to set their ownership in one step.
        Use RUN chown -R app:app /app when you need to change the ownership of files or directories that are
        already present in the image from previous layers or build steps.

        chown = stands for "change owner"
        -R = This flag stands for "recursive"
        app:app = This specifies the new owner and group for the files.
                The first app refers to the username, and the second app refers to the group name.
        /app = The command will change the ownership of /app and all files and subdirectories within /app

        chatGPT say better to do: "RUN chown -R app:app /app" than: "RUN chown -R app:app ./"
        but if your WORKDIR = /usr/src/app, then do:
        -
        WORKDIR /usr/src/app
        COPY . /usr/src/app
        RUN chown -R app:app /usr/src/app
        USER app
    }



Group 2.
1.  1a - CMD npm run dev
        runs a command, i.e "npm run dev". but it starts a new shell session to run this command
    1a - CMD ["npm", "run", "dev"]
        this is better as it does not spin up any new shell session
    1b - An alternative to CMD is ENTRYPOINT, e.g ENTRYPOINT ["npm", "run", "dev"].
        the difference is the CMD command can be over-ridden when starting the container, while
        that of ENTRYPOINT cannot be over-ridden

2.  docker login
    docker image tag <image_name>:tag <username>/<myRepo>:<tag>
    docker push <username>/<myRepo>:<tag>
    https://hub.docker.com/r/username/myapp - to verify that the image has been pushed

3.  docker run -d --name react_container -p 3000:3000 react_image:latest (or)
    docker run -d --name=react_container -p 3000:3000 react_image:latest

4.  a. docker run -it \
        --name postgres \
        -v ${PWD}/pg_data:/var/lib/postgresql/data \
        -e POSTGRES_PASSWORD=password \
        -p 5432:5432 \
        postgres:latest
    b. docker container ls (-a)
        docker ps (-a)

5.  0. docker logs CONTAINER_ID_or_NAME = show all logs
    a. docker logs -f CONTAINER_ID_or_NAME
    b. docker logs --tail 100 my_container {shows last 100 logs}
    c. docker logs -f -t my_container (or) docker logs -ft my_container

6.  1. docker exec -it my_container ls
    2. docker exec -it my_container mkdir /path/to/new_directory
    3. docker exec -it my_container sh

7.  1. docker exec -it my_container sh (or) docker exec -it my_container bash
        for alpine images, they're too small so they do not carry the more recent bash terminal, you can only use shell terminal's
        for ubuntu based images, you can use bash because these ubuntu based images are larger and carry the bash terminal

    2.  docker exec -it -u root my_container sh {or}
        docker exec -it -u root CONTAINER_ID_or_NAME /bin/sh {where -u == --user}

8. docker attach CONTAINER_ID_or_NAME
    note this attaches to the main process as its own user, not as root unless the main process is running as root.
    For attaching to a running shell as root:
    docker exec -it -u root CONTAINER_ID_or_NAME /bin/bash
    (or)
    docker exec -it -u root CONTAINER_ID_or_NAME /bin/sh {where -u == --user}

9.  - docker rm -f CONTAINER_ID_or_NAME
    - docker container rm CONTAINER_ID_or_NAME
    - docker rm -f $(docker ps -aq)
    ---
    docker start <CONTAINER_ID_or_NAME> # to start an existing container
    docker stop <CONTAINER_ID_or_NAME> # to stop a running container

10. docker volumes
    0. volumes are a way to persist data generated by Docker containers. They are separate from the container's
      filesystem and exist outside the container's lifecycle, making them ideal for storing persistent or shared data.
      -
      - docker volume create <my_volume>
      - docker volume ls
      - docker volume inspect <my_volume>
      - docker volume rm -f <my_volume>

    1. {
        bind mount: this volume is not managed by docker, it binds a directory from the host machine into a docker container
            e.g docker run -d --name my_container -v /host/path:/path my_image
        named volume: is managed by docker, it stores the volume in an area managed by docker, it is usually faster and
            better than bind mount.
            e.g docker run -d --name <my_container> -v <name_of_volume>:/path <my_image>
    }
    2. {
        docker run -d \
            --name postgres_container
            -p 5432:5432
            -v ${PWD}/pg_data:/var/lib/postgresql/data {bind_mound} or
            -v pg_data:/var/lib/postgresql/data {name_volume}
            -e POSTGRES_PASSWORD=password
            postgres:latest
    }
    3. {
        docker run -it --name my_node_app -v ${PWD}:/usr/src/app -w /usr/src/app node:14 bash
          explanation:
          -w /usr/src/app: This sets the working directory inside the container to /usr/src/app. When you run bash
            (or any other command), it will execute from this directory. If you don't specify -w, the working directory 
            will be the container's default (typically / or a specific directory depending on the image).

        ---
        to prevent it from bind mounting the node_modules folder, we do:
        method 1. {
            chatGPT says this method is not the best, it is instead better to use "method-2"
            docker run -it \
                --name my_node_app \
                -v ${PWD}:/usr/src/app \
                -v /usr/src/app/node_modules \
                -w /usr/src/app \
                node:14 \
                bash

            -v /usr/src/app/node_modules: Mounts an anonymous volume on-top of /usr/src/app/node_modules, effectively
                hiding the node_modules directory from your host. This setup ensures that the container uses its own
                node_modules directory, preventing any changes from affecting your local node_modules.

            -w /usr/src/app: Sets the working directory inside the container to /usr/src/app.
        }
        method 2. {
            You can use a named volume for node_modules to keep it container-specific and prevent it from syncing
            with the host directory.

            docker run -it \
                --name my_node_app \
                -v ${PWD}:/usr/src/app \
                -v my_node_modules:/usr/src/app/node_modules \
                -w /usr/src/app \
                node:14 \
                bash

            -v ${PWD}:/usr/src/app: This mounts your local directory into the container at /usr/src/app (as you intend).

            -v my_node_modules:/usr/src/app/node_modules: This uses a named volume (my_node_modules) for the node_modules
              directory inside the container. By using a named volume, Docker will manage node_modules independently, meaning 
              it won't sync it with your local host machine, preventing any conflicts.
              This second -v flag overrides the bind mount by mounting a named volume instead of syncing it with
              the host's node_modules directory. The "my_node_modules" volume is Docker-managed and does not reference
              the host's directory.
        }
    }


Group 3
1.  docker cp <container_id>:/path/to/file/in/container /path/on/your/local/system
    e.g docker cp container_id:/app/file.txt /home/user/local-folder/
    ---
    docker cp /path/on/your/local/system <container_id>:/path/in/container
    e.g docker cp /home/user/local-folder/file.txt <container_id>:/app/

2.  docker system prune -f
    docker container prune -f
    docker volume prune
    docker network prune -f
    docker image prune -f
    ---
    docker rm -f $(docker ps -aq) # for containers
    docker volume rm -f $(docker volume ls) # for volumes
    docker network rm -f $(docker network ls) # for networks
    docker rmi -f $(docker image ls -q) # for images

3.  answers:
    react & node.js: see the answer in "react" folder. the "Dockerfile_for_react"
