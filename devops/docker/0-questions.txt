Group 1
1. Build an image with out a tag (i.e <image_name>:<tag>)
2. Build an image with a tag (i.e <image_name>:<tag>)

3. List all images you've created
4. Go to docker hub and search for node-alpine image

5. delete an image 
6. delete multiple images
7. delete all images

8.  - what can you say about using the COPY command
    - copy multiple files
    - using regex in package.json copy
    - copy files with white space in their names
    - copying everything
    - difference btw COPY and ADD

9. create a group and create a user, then add the user to the group created using the RUN command
10. make the user you just created the default user
11. change ownership of files you're copying to the user you created



Group 2
1.  - tell us about the CMD command and how do you use it
    - what are the alternatives to CMD command, explain the diff btw CMD and it's alternatives
2. how do you push an image to docker hub?
2.1 what is the shortcut for "docker image tag"
3. run a container in a detached mode
4. run a container in an interactive mode {
    run a container with all the params you know {name, port, environment, volumes}
    list all the containers using 2 different commands (both running and stopped containers)
}
5. logs in a container {
    - follow logs in a container
    - show a certain number of log
    - show the timestamp for each logs
}
6. execute three commands in a running container {1. ls, 2. mkdir, 3. sh}

7.  1. execute a shell in an interactive mode in a running container
    2. execute a shell in an container as the root user 

8. use the docker attach command to attach to a running container
9. remove a docker container - use the 2 methods available
    - how do you start and stop an already existing container
10. docker volume
    0. everything you know about it and it's command
      how do you create a new volume using the volume command
      list all the volumes
      inspect a volume
      delete a volume by force
    1. tell me the difference btw a bind mount and a named volume and give an example
    2. do the both of them while starting a postgres container using a postgres image from docker hub
    3. how do you map your current workspace into the container using volumes,
       so that you can see live changes in your container


Group 3
1. copy a file from docker to your system and do vice-versa
2. Cleaning up your workspace {
    1. using prune
    2. recursively using rm --p60
}
3. create a Dockerfile for react, golang, node.js {
    dev - react, node.js, golang;
    prod - react, node.js, golang;
}
4. Create a docker-compose.yml file for these services {
    frontend
    backend
    db using (postgres and pgAdmin | mysql and phpMyAdmin)
}
5. build images from the compose file created
    - don't use --no-cache
    - use --no-cache
    - see the list of images created

6. using the compose file 
    - start the containers
    - see the list of containers from this compose file
    - stop the running containers for only this compose file
    - use a different docker-compose file to start some container (e.g: docker-compose.dev.yml)
    - Stop running containers without removing them
    - Start previously stopped containers without rebuilding or recreating them
    - Restart the containers defined in the docker-compose.yml file
    - Remove stopped service containers
    - Pause the running containers (will stop all processes without removing them)
    - Unpause previously paused containers

7. Read: so more docker-compose commands

8. Read: some of the properties/methods that can be used in docker-compose services

9. Read: docker-compose | restart vs deploy.restart-policy
