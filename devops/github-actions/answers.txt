1. {
    1. on: push
        branches: [main, dev]

    2. on: pull_request
        branches: [main, dev]

    3. on: issues:
                types: [opened, edited]

    4. on: workflow_dispatch:
                inputs:
                    example_input:
                        description: 'An example input'
                        required: true
                        default: 'default_value'

    5. on: deployment_status:
                types: [success, failure]

    6. on: repository_dispatch:
                types: [my_custom_event]

    7. on: release:
                types: [created, published]

    8. on: schedule:
                - cron: '0 0 * * *' # Runs daily at midnight

    9. on: dependabot:
                types: [pull_request]

    10. on: workflow_run:
                workflows: ["Main Workflow"]
                types:
                    - completed

    11. on: create:                             {fork events:}
                tags: [fork]
}

2.
    1. what are they?
        Github workflows are workflows that run in response to certain events/actions within our code
        repository @ github, each workflow should have at-least 1-job and each job can have multiple steps,
        but should have at-least 1 step. and a step can either be a shell-command or an action from the
        github-actions community. Each job is associated with a runner, The runner is a basically a machine
        or a compute engine that can be connected to github . The runner will establish a session and each
        steps in a job will be processed by this runner. The runner works on the steps from top to bottom.
        Steps cannot run in parallel, but jobs can run in parallel(i.e concurrently)
    
    2.  - inside your code repo, create a folder called ".github"
        - inside the .github folder, create a folder called: "workflows"
        - inside the workflows folder, here you can create all your github-actions workflows .yaml files

    3. see ./tasks/2-hello-world.yml

    4. the action is used to checkout/switch to the branch from where the event that triggered the
        workflow was called from, so if the push_request or pull_request was called from the
        "bug/fix-add-to-cart", this action will switch to the branch "bug/fix-add-to-cart" and
        run your workflow in this specific branch.
        otherwise if you do not use the checkout@v4, the workflow will run on the main branch
    
    5.
        - On your github actions page, at the top of the terminal where your workflow ran, you'll see
            a button [●●●] at the right corner, click on this button and you'll see a drop-down, this
            drop-down contains the following actions:
                view workflow file
                view workflow runs
                create status badge
                delete all logs
        - click on the settings button for the following options:
            show timestamps
            switch terminal to full-screen
            download logs
            view raw logs
        - click on the [search input] to search for something in your log, let's say in your workflow,
            somewhere you did: echo "stanley will be one of the greatest by GOD'S grace", you can use
            the [search input] to verify that this output is available in your log, and then you can
            also search for other expected outputs from your workflow
        - click on your [Re-run job button] to re-run all your jobs, this button is here because we
            added "workflow_dispatch" to our workflow, otherwise, if it was not present, you'd not
            see this button. the button helps us to run our workflows without always relying on events

3.
    1. see ./task/3-comment-on-issues.yml
        we need to pass environment variables in the second job, the first job can access the environment
        variables internally because it is an action, but since we are sending a post request, we also need
        to attach the environment variables in the url

    2. what is the | jq '.'? used in the github_action file

        The command | jq '.' in the context of the line you provided is used for processing and formatting JSON data.

        1. | (Pipe Operator) : This takes the output of the command before it (in this case,
            the echo "${{ toJSON(github.event) }}") and sends it as input to the command after the pipe (jq '.').

        2. jq '.' :
            - jq is a lightweight and flexible command-line JSON processor. It allows you to extract, manipulate,
              and format JSON data
            - The "." is a filter in jq that represents the entire JSON object being passed to it.
              Essentially, "." means "take the input and output it as it is."
            - The jq command, when used this way, will pretty-print the JSON data in a more readable format.
              It indents and structures the JSON nicely for easy reading.

        Summary:
            In this case, the entire command echo "${{ toJSON(github.event) }}" | jq '.':
            -
            Converts the GitHub event context (github.event) into a JSON string.
            Pipes that JSON into jq to pretty-print it.

4.
    1. Read: Some of the principles of Continuous Integration
        1. Automate the build
        2. Introduce Automated test(unit testing, Integration testing)
        3. Linting (maybe)
        4. Security and Scanning (maybe)
    
    2. work on the workflow for a nodejs project, let it include testing
        see ./task/4.2-nodejs-test-workflow.yml

    3. work on the workflow for a golang project, let it include testing and test coverage report
        see ./task/4.3-golang-test-workflow.yml

    4. here is how to set up rules to allow merging based on successful workflows:
        1. Go to your repository on github
        2. click on the "settings" tab
        3. click on the "branches" tab
        4. if no rules, then click on [Add branch ruleset]
        5. Enter your branch name e.g ("main") and then select these options
            [✔] Require a pull request before merging
                [✔] require approvals

            [✔] Require status check to pass before merging
                [✔] Require branches to be up to date before merging
                input [search for status check]
                - In the search box, enter the name of the job you want to pass before the branch is allowed
                  to merge into the branch(i.e the branch you specified @ step-4, the "main" branch)
                - {
                    The teacher added 3 jobs, these jobs can be found in different jobs at different workflow:
                    - Run linter            {see ./ci-cd-intro/.github/workflows/ci.yml}
                    - Run unit tests        {see ./ci-cd-intro/.github/workflows/ci.yml}
                    - Analyze (javascript)  {see ./ci-cd-intro/.github/workflows/codeql-analysis.yml}
                }

