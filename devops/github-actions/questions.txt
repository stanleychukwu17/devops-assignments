full_revision: 18th Feb 2025
full_revision: 2nd May 2025

1. what are the events that can trigger a workflow run {try to name 4-10 events}
    see more details on the answers in ./tasks/1-event-triggers.txt

2. workflows
    1. what are they?
    2. how do you create a workflow and where do you save it?
    3. create a workflow called hello_world
        - *Do the task on your vsCode, not on paper
        - let the events be push & pull_request on your "main" & "dev" branches
        - include {workflow_dispatch} so that we can click a button to always re-run the job
        - take a message from the workflow_dispatch that we be displayed in both of the jobs below

        - job1:
          - name: "set up job"
          - settings:
            - outputs: add an output called "app_version"
              - access the value from one of the steps
          - step: checkout the branch you're working on
          - step: update the linux packages and install the "tree" package
            - use "tree" command: display the folder structures using the "tree" package
          - step:
            - id: should be "app_version"
            - let this step echo an "app_version" into github outputs, so that i

        - job2:
          - name: "hello_world job"
          - settings:
            - needs: the "set_up" job
            - set defaults to run in bash
            - set defaults working directory to be "web"
            - add environment variable called "FIRST_NAME"
          - step: checkout the branch you're working on
          - step: echo the "app_version" output from the "set_up" job
          - step: display the hello message from the input
            - if the input is empty, use a default message
            - echo "we made it"

        - job3:
          - name: "bye_world job"
          - settings:
            - needs: the "set_up" & "hello_world" job
            - set defaults to run in bash
            - set defaults working directory to be "web"
            - add environment variable called "LAST_NAME"
          - step: checkout the branch you're working on
          - step: echo the "app_version" output from the "set_up" job
          - step: display the hello message from the input
            - if the input is empty, use a default message
            - echo "we made it"

    4. Read: read about some additional's you can do on your github-actions page on github

3. You next task is to use github-actions to write a comment on newly created issue in
    our github-repo. Let the workflow have 2 jobs:

    1. 1st job: dump github events data & use community action to add a comment to the issue
    2. 2nd job: use the github api to post a comment to the issue
    3. what is the | jq '.'? used in the github_action file

4.
    1. Read: Some of the principles of Continuous Integration
    -
    - Both of the task below uses the following folder structure
          - .github/
          - web/
          - backend/
          - infra/
          
          task 2. should only run when there are changes in web/
          task 3. should only run when there are changes in backend/

    2. work on the workflow for a nodejs project
        - let the workflow have 2 jobs: 1. test, 2. lint
        - let the workflow events only be triggered when the changes happen in the web/** path 
        - let the steps only run in the ./web directory

    3. work on the workflow for a golang project, let it include testing and test coverage report
        - let the workflow events only be triggered when the changes happen in the backend/** path 
        - set the environment variables globally
            ENV, PORT, TIMEZONE, DB_NAME, POSTGRES_DB_USER, POSTGRES_DB_PASSWORD
        - should have 2 jobs
            1. log-the-env-variables
            2. test-golang-service
                {steps}
                - install docker and log the docker version to be sure installation was successful
                - checkout the branch
                - setup your golang
                - install go dependencies
                - run go test with coverage output
                - check the coverage out
                - delete the coverage.txt file generated during the workflow
            3. look at this file and re-write the bash code inside of it
                - ./tasks/4/4.3-analyze.sh

    4. how do you set rules in your repo so that push_request & pull_request will only
        pass when certain jobs are successful {You can go to your github account and demonstrate it}







?. ids in github_actions

?. depends on in github_actions

?5. reusable workflows
    - what are reusable workflows
    - Read: example of reusable workflow with inputs
    - Read: example of exposing outputs from reusable workflows
    - Read: best practice for reusable workflows

6. matrix in github_action

7. take a look at this workflow the python/cpython workflow {
    https://github.com/python/cpython/blob/main/.github/workflows/build.yml
    https://github.com/python/cpython/blob/main/.github/workflows/reusable-context.yml
    https://github.com/python/cpython/blob/main/.github/workflows/reusable-change-detection.yml
    https://github.com/python/cpython/blob/main/.github/workflows/reusable-windows-msi.yml
    https://github.com/python/cpython/blob/main/.github/workflows/stale.yml
}
