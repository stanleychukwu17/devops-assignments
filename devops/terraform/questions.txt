full_revision: 21 Jan 2025
full_revision: 11th Feb 2025

1. What is the core terraform workflow

2. Talk about terraform providers

3. Configure an aws provider with both access_key and secret_key

4.  What is a terraform block, arguments and label
    - Give an example

5. How do you initialize terraform in your project directory

6. Draw out the journey of creating an EC2 instance starting from a VPC

7. What is the syntax for creating a resource

8. what is a cidr_block
8.1 Read: if you have time, see the difference btw a cidr_block of `10.0.0.0/16` and `237.84.0.0/16`

9. Create a VPC and add a Tag of Name to it

10. How do you preview changes in your main.tf
    - How do you apply the changes in your main.tf
    - How do you save the preview into a file
    - How do you apply the configuration from the save file

11. How do you skip the terminal asking you to enter yes when you run "terraform apply"
    - How do you format your .tf files to the standard terraform syntax
    - List all the ways you can use the fmt command (3 ways)
    - How do you validate the syntax and arguments in your terraform configuration

12. How do you destroy the infrastructure you built
    - destroy with auto approve
    - destroy only a particular resource
    - how do you replace only one resource on your existing infrastructure using the apply command

13. write a config file with 2 Subnets and let them be public by associating them to an
    internet gateway and a route table
    see both code for refreshment {
        D:\Sz - projects\28-devops\1-terraform\00-examples\1-aws-subnet-with-igw
        D:\Sz - projects\28-devops\1-terraform\00-examples\2-aws-subnet-using-a-load-balancer
    }

14. How do you declare a variable, what are the (3&4) arguments in a variable declaration.
    - And in what files do you store your variables

15. How do you force a replacement of your variables when running the terraform plan or
    terraform apply command

16. what can you say about terraform.tfvars file?
    - what is the difference btw terraform.tfvars and variables.tf

17. Create a production.tfvars file and use it to run the terraform apply command

18. How can you use the variables in your main.tf configuration file
    - How do you insert a variable in a string

19. Talk about variable precedence - how are they ranked in terms of which one gets applied

20. What is a route table and what is an internet gateway

21. what is an aws_security_group
    - difference btw aws_security_group & aws_default_security_group

22.
    - add a variable to your variables.tf and terraform.tfvars file: "public_cidr"
    - use the variable to create an aws_security_group
    - Read: explanation of some of the options used in the ingress and egress

23. Create an EC2 instance

24. How do you generate a ssh key pair from your linux command line

25. How do you set the ssh key permission to read only

26. use the ssh to create a resource key pair and use the key pair in your ec2 instance

27. login into your running ec2 instance using the ssh key that you generated
27.1 once logged in, how do you switch to been the root user?

28. move the ssh file path to the variable file and use it in the aws_key_pair resource

29. What are data resources in terraform
    - use the data resource block to dynamically fetch the ami for an ec2 instance

30. what is the proper file for output variables to be stored?

31. write the outputs for {and ec2 public ip}, {ec2 ami}, {vpc id}, {ec2 id}

32. - what command can you use to view all of your outputs
    - what if you wanted to view only one output, e.g ec2_public_ip_address
    - display your output on in json format
    - save the output in json format
    - how do you hide an output from showing in the terminal

33. - what is terraform state
    - in what file is the terraform state stored

34. - how do you see all the resources in your terraform state
    - explain this command terraform show | grep -A20 aws_vpc
    - use show to see a specific resource
    - use show to see the content of a plan file

35. terraform state
    - list only the resources in the state file
    - use the state command to see just one resource
    - use state to view the state in json format
    - list state resource by Module. {tip: use the grep command}

36. running commands on your ec2 instance
    - which is the best for running commands on your ec2 instance (cloud-init or ansible)
    - create an entry-script.sh configuration that can be used in your ec2 instance
    -
    - not_needed: Read: read about some of the highlights of using cloud-init
    - not_needed: create a cloud-init configuration in yaml called "web-app-template.yaml"
    - not_needed: explain the code in your cloud-init configuration
    - not_needed: use the cloud-init in your ec2

37. The teacher copied the terraform code(i.e the terraform files) from another project into a
    new folder/project and then he modified the "aws_instance" resource to use cloud-init to setup
    the aws_instance.
    So he did: "terraform init", then he did: "terraform apply -auto-approve" and he got an error
    saying: "Error importing EC2 key pair (testing_ssh_key): InvalidKeyPair.Duplicate: The KeyPair
    'testing_ssh_key' already exists"
    Now:
    - explain why this error occurred
    - how you solve the above problem
    - Read: read how you can find your key pairs on aws

38. Now that you've resolved the issue with your "aws_key_pair" and your
    "terraform apply -auto-approve" was successful, do the following:
    -
    - login to your ec2 instance
    - verify if all the users were created successfully
    - verify if all the groups were created successfully
    - check if your httpd is running
    - check if your docker is running
    - use your browser and confirm that the ec2 instance is accessible from the web using the
        ec2 PublicIP, use PublicIP = 35.159.20.29
    - use your browser and confirm that the docker on your ec2 instance is running, visit the
        port 8080 to confirm this, use PublicIP = 35.159.20.29

39: Read: read about how to troubleshot & logging in terraform

================
SECTION 2 BEGINS
================
1. List the different value types in terraform
    - List simple types
    - List collection types
    - List structural types

2.  Collection types
    - Give an example of using "list"
    - Give an example of using "maps"

3. Structural types
    - Give an example of using "tuple"
    - Give an example of using "object"

4. The count meta-argument
    - What is count in terraform and what can it be used for
    - Use count to create 3 aws instances
    - Using count & variable: "users" (list(string), a list of usernames), create 4 IAM users
    - explain the element and length functions
    - when you do count=0 in any resource, what will happen when you run terraform apply

5.  - Read: the for_each meta-argument {No need to master}

6.  - Read: take a look at looping with dynamic block {No need to master}
    - Read: what happens when you run terraform apply
    - Read: changing the iterator name
    - Read: see the explanation for the different ports used

7. Conditional Expressions
    - let's say we want to spin up different instances depending on our current environment, use
        terraform conditions and variables to check if we should launch an ec2_instance for testing
        or for production

8. Locals
    - in what files can you save your locals
    - give an example of using locals

9. Terraform built-in functions
    - lookup function
    - difference btw lookup & element function
    - file function
    - formatDate & timestamp()

10. Give an example of using splat expressions

11. Read: Terraform remote state
    - working with amazon s3 to store your state file
    - using dynamodb to implement state locking
    - working with terraform cloud to store your state file

11.1 Write down the spinning up of resources using load_balancer - from DevOps Directive lecture
    - list all the resources
    - write the code for all the resources listed

12. Modules
    - what is a module in terraform
    - what is a root module & child module
    - what is the difference btw a local module and a remote module

13. How do you structure your project to use modules

14. - Create a small project using modules. Let the ec2 module house the creating of an aws_instance
    - use the module in your root module 
    - parameterize the ec2_module you created
    - provide your own variables to the ec2 module (use variables here)
    - what do you do after including a new module to your root module

15. what makes a good module

16. As you separate into modules, what resources goes into which modules?
    - vpc module
    - ec2 module
    - storage module
    - network module
    - dns module
    - database module

17. Accessing child modules output
    - expose your vpc_id using an output from your vpc module and access it from the root module
    - what is the syntax for accessing the output of a child module
    - how will different child modules access their outputs e.g:
      use the vpc_id from the "vpc_module" in the "ec2_module" to create the aws_security_group
    - how do you expose an entire resource as an output, e.g:
      - expose the entire ec2 instance in the ec2 module
      - access the values from the root module, get: ec2_ami, ec2_public_ip_address, ec2_instance_id

17.1 see what the final module of DevOps Directive looked like

18. - Convert all the code/project from DevOps Directive to use modules
    - First work on the vpc module and parameterize it to use variables
    - use the vpc module in your root module
    - Now move the ec2_instance to a module called "server" and use it in your root module
    - Now the route53 into Networking module
    - Now run terraform plan to see that all is well and okay (how many resources would be created?)

19. Terraform registry
    - Read: what is terraform registry
    - Read: How to create a vpc using a module from terraform registry
    - Read: How to create a security group using a module from terraform registry
    - Read: How to create an ec2 instance using a module from terraform registry
    - Read: Accessing outputs from the modules
    - Read: ssh-ing into the aws_instance created using this module from terraform registry

================
SECTION 3 BEGINS
================
1. Drawing of images
    - Look at the image of the ec2 from lecture 1 and draw it on your own
    - Look at the image from DevOps Directive lecture and draw it on your own

2. How do you create an s3_bucket and dynamodb_table for storing and locking of .tfstate files

3. Meta arguments in terraform
    - depends_on: talk about it
    - lifecycle: talk about it

4. Managing multiple environment
    There are two main approaches:
    1. workspaces: talk about it
    2. File structure: talk about it (add note on referenced images p49)

5.  Read: How to use terraform workspace to manage environment 
    - creating a workspace
    - see all workspace
    - switching btw workspaces
    - deleting of workspaces

6.  Read: Terragrunt
    Read: using the "tree" command
    Read: using Directory/File structure to manage environment

7. Testing terraform code
    - using bash: look at the code and write by yourself
    - using golang: look at the code and write by yourself