1.  - Config default user.name & user.email
        git config --global user.name "Chukwu Stanley Edward"
        git config --global user.email "jondoe4life@yahoo.com"

    - how do you see the global user.name and user.email
        To see name or email, you do
        git config user.name or git config user.email

    - how do you add a local user.name & user.email
        git config --local user.name "Chukwu Stanley Edward"
        git config --local user.email "jondoe4life@yahoo.com"

2.  - how to see all commit messages in a repo
        git log {See all commit messages}
    - then how to see it in one-line
        git log --oneline {See all commit messages in one-line}

3. How do you modify commits to include files you did not add + modify the commit message
    git add file_a.txt file_b.txt
    git commit -m "added 2 files"
    git add file_c.txt file_d.txt
    git commit --amend
    {modify your commit message and save}
    git push

4. Tell us about github branches
    - we use branches to enhance our workflow on git, to allow proper development of new-features or
        bug fixes. This inturn saves us from too many unnecessary conflicts at-least until we are
        ready to merge with other branches
    - git branch <new-branch-name>
    - git branch -d <branch-name> {for merged branch}
        git branch -D <branch-name? {For un-merged branch}
    - git branch -m <new-branch-name> {stay in the branch you are re-naming}
    - git branch
    - git branch -v
    - git branch -r
    - git branch -a

5.  - Switch to a newly created branch
        git switch <branch-name>
    - Switch while creating a new branch using the *Switch* command
        git switch -c <new-branch-name>

6.  1. when you try to switch from a branch with un-committed changes, git will not allow you to switch
        branches until you commit the changes or stash the changes,
    2. when you have new files that are not saved, the new files will follow you to the branch you're
        switching to

7. if your current branch is the "bug/fix-cart" branch, how do you merge this branch into the main branch
    1. you switch to the *main* branch by: git switch main
    2. you run: git merge bug/fix-cart
    3. git branch -d bug/fix-cart (this is optional, to delete the branch)

8. how do you save an uncompleted, uncommitted work before switching to another branch
    - git stash

9. Tell us all about the commands of stash and explain them (6 commands)
    1. git stash : this will stash(save) all your uncommitted changes and will allow you to switch to
        another branch without any issues
    2. git stash pop : the will remove the last stash and apply it to the current branch
        (after all, it will delete the stash from storage)
    3. git stash apply : this will take the last stash and apply it to the current branch
        (but it will not delete the stash from storage)
    4. git stash list : shows you all the stashes
    5. git stash drop <stash-id> : deletes a stash using the stash-id
    6. git stash clear: deletes all the stash

10. how do you take just a file back to an old commit (i.e losing the changes made after the commit)
    git restore <filename> - this will restore the file to the state of the last committed file
    git restore --source <commit-hash> <filename> - this will restore the file to the state it was in the
        commit hash provided

11. what is the difference btw git reset and git revert
    git reset <commit-hash> - this will delete all the commits you have made after the <commit-hash> specified
        but it will not roll back the changes, everything will remain the same, only the commits will be deleted
    
    git reset --hard <commit-hash> - this will delete and the commits and will also take your project back to
        the state it was at the time of the <commit-hash> specified

    ### git revert
    git revert <commit-hash> - this is different from git reset because instead of deleting the commits
        and taking the project back, it will instead create a new commit (and in this new commit, it will
        take your work back to the state it was at the <commit-hash>), because it results in a new commit,
        you'll be prompted to enter a commit message
    
    ### which one should i use
    - if you want to reverse commits that you haven't shared with anyone, use reset and no one will ever know
        what happened
    - but if you want to reverse commits that are already in other peoples system, you should use revert,
        because if you delete the commit on other peoples system, this will cause serious serious issues
        to reconcile the changes

12. git clone <url_of_repo>

13. what is git remote and *git remote -v*
    git remote is where we store our local project, we connect our local project to a remote repo using git..
    the remote repo can be github, gitlab e.t.c
    -
    git remote: shows you the remote name
    git remote -v: shows you the remote name and the remote url

14. - how do you add a remote url to push your github code to (also the syntax)
        git remote add <name_of_remote> <url_of_repo>
        git remote add origin https://github.com/stanleychukwu17/iLoveMyWife

    - how do you delete a remote url
        git remote remove <name_of_remote>;
        git remote remove origin

15. - write down the full syntax for git push
        git push <remote_name> <name_of_branch>
        git push origin main

    - how do you push a feature branch
        git push origin feature/add-buy-it-now-button

    - how do you set a branch to be an upstream branch to always push to
        git push -u <remote_name> <name_of_branch>
        git push --set-upstream <remote_name> <name_of_branch>

16. how do you switch to a remote branch (i.e a branch available in your remote repo, but not in your local repo)
    git switch <name_of_branch_on_the_remote_repo>

17. Diff btw *git fetch* and *git pull*
    - git fetch
        Downloads new changes from the remote repository but does not integrate them into your current
        working branch. it Updates the remote tracking branches (i.e origin/<repo> e.g: origin/main) in your local
        repository to reflect the state of the remote repository.
        After running "git fetch", you'll typically do: "git diff origin/main" and then maybe merge the changes:
        "git merge origin/main"

    # git pull
        Downloads new changes from the remote repository and integrates them into your current branch.
        it Performs a git fetch to bring down the latest changes from the remote repository. Then, it
        automatically merges the retrieved changes into your current branch.
        -
        use with caution: It automatically performs a merge, which could lead to conflicts if your
        local branch has diverged from the remote branch.

18. - write a command to fetch from origin/main branch
        git fetch origin main

    - write another command to fetch from origin/new-page/promo
        git fetch origin new-page/promo

19. - write a command to pull from origin/main branch
        git pull origin main

    - write another command to pull from origin/new-page/promo
        git pull origin new-page/promo

    - what happens when you do a git pull, especially if they are conflicts
        when the changes pulled from the remote repo are conflicting with one or more files on your
        local repo, git will pause the merging and require you to manually resolve the conflicts and
        merge the branches again by yourself


20. cleaning up
    - write a command to clean up only remote tracking branches (without pulling)
      git fetch --prune
      or
      git remote prune origin


