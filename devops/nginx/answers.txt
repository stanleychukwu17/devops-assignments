1.  Nginx
    - what is Nginx
      Nginx can be used as a web server that serves content or it can be used as reverse proxy which helps
      when load balancing. it can also help with Backend re-routing & caching

    - talk about what a normal architecture look like vs what an Nginx architecture would look like
      - normal architecture:
        [users request] -> [server] -> [database]
    
      - Nginx architecture
        [users request] -> [nginx]  -> [server] ->
                                    -> [server] -> [database]
                                    -> [server] ->
      
      with the normal architecture, the request are going straight to the severs and it is not the best,
      because if the request become too much for the server it will crash it, it is also difficult
      to scale with the normal architecture, because every time you add a new server in the backend,
      you need to start changing frontend code -> as this can become pretty complex. but with the
      Nginx architecture, everything becomes easy to manage

    - what are the following concepts/terms in Nginx? {Frontend, Backend, Upstream, Downstream}
        Frontend: refers to all communication between the user_request & Nginx

        Backend: refers to all communication between Nginx & the servers

        Upstream: refers to the servers or services that NGINX communicates with to fulfill a request
            When NGINX acts as a reverse proxy or load balancer, it forwards client requests to upstream
            servers (like application servers or backend services).
            The upstream servers handle the actual processing of the request and then return the result to
            NGINX,  which then sends the response back to the client.

        Downstream: refers to the end-users or the clients that send requests to your NGINX server.
            When a client sends an HTTP request to NGINX, NGINX processes it, and then sends the response
            back to the downstream client.

    - Tell us about the 7 layers in OSI Model
        Please - Physical layer 1
        Do - Data-link layer 2
        Not - Network layer 3
        Throw - transport (TCP/IP) layer 4
        Sausage - session layer 5
        Pizza - presentation layer 6
        Away - application layer 7

2. Talk about Layer 4 and Layer 7 proxying in Nginx
    Layer 4 (Transport Layer of the OSI model (TCP/UDP)):
      - Layer 4 proxying operates at the Transport Layer of the OSI model (TCP/UDP)
      - NGINX forwards raw TCP/UDP packets without inspecting the content
      - Used for protocols like MySQL, FTP, or custom services
      - Provides basic load balancing and traffic distribution based on IP and port

        e.g:
        stream {
            upstream backend {
                server backend1.example.com:3306;
                server backend2.example.com:3306;
            }

            server {
                listen 3306;
                proxy_pass backend;
            }
        }

    Layer 7 (Application Layer, HTTP proxying):
     - Layer 7 proxying works at the Application Layer and understands HTTP/HTTPS content
     - NGINX can inspect headers, cookies, and URLs to make routing decisions
     - Allows for more advanced features like URL rewriting, caching, and SSL termination

        e.g:
        http {
            upstream backend {
                server backend1.example.com;
                server backend2.example.com;
            }

            server {
                listen 80;

                location / {
                    proxy_pass http://backend;
                }
            }
        }
    
    You see that layer 7 in written inside the "http" block and layer 4 proxying is written
    in the "stream" block

3. Talk about TLS termination and TLS passthrough in Nginx
    1. TLS Termination:
        - TLS Termination refers to NGINX decrypting the incoming SSL/TLS traffic (i.e., HTTPS) and
          then forwarding the unencrypted traffic (HTTP) to the backend servers
        - NGINX handles the encryption and decryption process, offloading this task from the backend servers,
          making it more efficient
        - TLS Termination operates at Layer 7 because NGINX decrypts and inspects the traffic (HTTP)

        e.g:
        server {
            listen 443 ssl;
            server_name example.com;

            ssl_certificate /etc/nginx/ssl/cert.pem;
            ssl_certificate_key /etc/nginx/ssl/key.pem;

            location / {
                proxy_pass http://backend;  # Unencrypted HTTP forwarded to backend
            }
        }

    2. TLS Passthrough:
        - TLS Passthrough means that NGINX does not decrypt the incoming SSL/TLS traffic.
          Instead, it forwards the encrypted traffic directly to the backend server for decryption.
        - This is useful when you want to maintain end-to-end encryption between the client & the backend server
          (e.g., for security reasons or when the backend server needs to handle the SSL certificates).
        - NGINX acts as a transparent proxy in this case, forwarding encrypted traffic without inspecting
          or modifying it.
        - TLS Passthrough operates at Layer 4 because the encrypted traffic is passed through without
          decryption or inspection.

        e.g:
        stream {
            upstream backend {
                server backend1.example.com:443;  # Backend server with TLS (HTTPS)
                server backend2.example.com:443;  # Another backend for load balancing
            }

            server {
                listen 443;
                proxy_pass backend;  # Load balancing between backend1 and backend2
            }
        }

