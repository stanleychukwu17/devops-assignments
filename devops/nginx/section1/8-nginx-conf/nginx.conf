http {
    upstream app1_backend {
        server node_app1_backend1:9000;
        server node_app1_backend2:9000;
    }

    upstream app2_backend {
        server node_app2_backend1:8000;
        server node_app2_backend2:8000;
    }

    server {
        listen 81;

        server_name app1.stanley.com;

        location / {
            proxy_pass http://app1_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Set timeouts to prevent hanging requests
            proxy_connect_timeout 90;
            proxy_send_timeout 90;
            proxy_read_timeout 90;
        }
    }

    server {
        listen 82;

        server_name app2.stanley.com

        location / {
            proxy_pass http://app2_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Set timeouts to prevent hanging requests
            proxy_connect_timeout 90;
            proxy_send_timeout 90;
            proxy_read_timeout 90;
        }
    }

    server {
        listen 80;

        server_name static.stanley.com;

        location / {
            # serve files or proxy the request to an upstream, in this case we will serve files
            root /var/www/static;
            try_files $uri $uri/ = 404;
        }
    }
}

# Set worker connections
events {
    worker_connections 1024;
}

# Auto worker processes based on the number of CPU cores
worker_processes auto;
