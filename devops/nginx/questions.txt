full_revision: 23rd mar 2025
full_revision: 1 Apr 2025

=============
SECTION 1
=============
1.  Nginx
    - what is Nginx
    - talk about what a normal architecture look like vs what an Nginx architecture would look like
    - what are the following concepts/terms in Nginx? {Frontend, Backend, Upstream, Downstream}
    - Tell us about the 7 layers in OSI Model

2.  Talk about Layer 4 and Layer 7 proxying in Nginx (give examples for each)

3.  Talk about TLS termination and TLS passthrough in Nginx

4.0 practice {
    practice-project: 
        local: D:\Sz - projects\28-devops\0-practice\devops\nginx\1-nodeapp-simple
        github: https://github.com/stanleychukwu17/0-practice-to-become-better/tree/main/devops/nginx/1-nodeapp-simple
    -
    - check start the app to see that all is working properly
    - write the Dockerfile for the app
    - create an image for the Dockerfile you built - "simple_nodeapp:v1"
    - start a container with the image: "simple_nodeapp:v1", to be sure it works
    - start the 3 docker containers and be sure everything is working fine
    - write the Nginx configuration and start the Nginx container, there will be error because of
      service discovery, you need to connect all services to the same network
    - Do yo thing with the networking {
        create a new network nginx_network
        connect the network to the containers
        inspect one of the containers to be sure that it is in the nginx_network
    }
    - restart the app to see it is working with nginx {
        see the logs of nginx_0 container, check to find the 404 error when a request
        was made for the favicon.ico
    }
    - write everything in a docker-compose file for everything
    - start the docker-compose and be sure it works
    - delete {
        Dockerfile
        docker-compose.yml
        Docker images
        Docker containers
        Docker network
        -
        delete all files except app.js .gitignore .dockerignore
    }
}

4.  Nginx Docker container
    - start a nginx container in detached mode using
        image: nginx:1.26.3
        container_name: nginx
        port 80:80
    - inspect the container
    - see the logs from the container
    - attach to the container
    - login into the container, go to etc, see users(in passwd), see groups (in group)

5.  Solving image one problem
    - Look at the image of the 2 nginx load balancers we will be creating
    - Create a node.js application to listen on port 9000, should console.log(the hostname)
    - create the Dockerfile for the node.js application
    - create the docker image of the nodejs application
    - use the image to spin up 3 new containers and do not expose the ports, use names
      nodeapp1, nodeapp2, nodeapp3

6.  Now write you Nginx configuration:
    1. create upstream server for the nodeapp services
    2. create a server that listens on port 8080 and forward all request to the node upstream

7. Read or explain the code in your nginx config

8. Networking and spinning up all the services
    - now create a Docker Network called backend_network_for_nginx
    - connects all the containers to the Network i.e (nginx_test_server, nodeapp1, nodeapp2, nodeapp3)
    - start all the nodeapp & the nginx container. see if everything is working as expected

9.  Solving image two problem
    - create another nginx container called ng2 using the same config, port 81:8080
    - stop the containers and connect it to the backend_network_for_nginx network
    - start all the containers and test the different nginx on different ports

9.1 Read about exposing ports of your docker container

10. Now go and practice in real life from (question 5 to question 9)

11. Another task: write another nginx.conf configuration
    - write 2 upstreams (app1_backend, app2_backend)
    - let these upstreams group have 2 containers, let app1 listen on port 9000, and app2 on 8000
    - create 2 servers
    - let the 1st server listen on port 81 with server_name app1.stanley.com and forward
      all request to app1_backend
    - let the 2nd server listen on port 82 with server_name app2.stanley.com and forward
      all request to app2_backend
    - create the 3rd server to listen on port 80 with server_name static.stanley.com and
      let it serve files from the root

12. Understanding nginx timeouts for efficient configuration
    - Read: see list of frontend & backend timeouts
    - Read: see explanation of frontend timeouts
    - Read: see explanation of backend timeouts

13. Nginx as a layer 7 proxy, look at the example, explain what is going on and re-write it

14. Nginx as a layer 4 proxy, look at the example, explain it and re-write it

15. Enable HTTPS on Nginx
    - Read: how do you enable https on your nginx server
    - enable fast and secure TLS 1.3 on Nginx
    - enable http2 on Nginx

## Websockets with Nginx

16. practice
    - create a normal websocket node app
    - bring the app to live and test it
    - create 3 containers for frontend
    - create 3 containers for backend
    - use layer 4 proxy for the websocket app
    - use layer 7 proxy for the websocket app
    - read some of the explanation on what is going on

17. practice
    - in the layer 7 config
    - create 2 upstream groups wsapp & wschat and let them have 2 servers each
    - listen on port 80 and on url :80/wsapp and :80/wschat and proxy to the right upstream 
    - read some of the explanation


=============
SECTION 2
=============