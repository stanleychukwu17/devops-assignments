full_revision: 19th mar 2025
full_revision: 19th mar 2025

=============
SECTION 1
=============
1.  Nginx
    - what is Nginx
    - talk about what a normal architecture look like vs what an Nginx architecture would look like
    - what are the following concepts/terms in Nginx? {Frontend, Backend, Upstream, Downstream}
    - Tell us about the 7 layers in OSI Model

2.  Talk about Layer 4 and Layer 7 proxying in Nginx (give examples for each)

3.  Talk about TLS termination and TLS passthrough in Nginx

{
    Tip: the docker container name is the same as the hostname if you do not provide a hostname
    if you do:
        docker run -p 80:80 --name nginx_test_server -d nginx:1.26.3
        the container name & hostname too will be nginx_test_server

    but if you can provide a custom hostname by doing:
        docker run -p 80:80 --name nginx_test_server --hostname nginx_load_balancer -d nginx:1.26.3
        now the container will be: nginx_test_server
        now the hostname will be: nginx_load_balancer
}

4.0 practice {
    practice-project: D:\Sz - projects\28-devops\3-nginx\0-practice\0-nodeapp-simple
    -
    - check start the app to see that all is working properly
    - write the Dockerfile for the app & start the docker container to see everything is working fine
    - write the Nginx configuration and start the Nginx container, there will be error because of
      service discovery, you need to connect all services to the same network
    - Do yo thing with the networking
    - write everything in a docker-compose file for everything
    - start the docker-compose and be sure it works
    - delete {
        Dockerfile
        Docker images
        Docker containers
        Docker network
        -
        delete all files except app.js .gitignore .dockerignore
    }
}

4.  Nginx Docker container
    - start a nginx container in detached mode using
        image: nginx:1.26.3
        container_name: nginx
        port 80:80
    - inspect the container
    - see the logs from the container
    - attach to the container
    - login into the container, go to etc, see users(in passwd), see groups (in group)

5.  Solving image one problem
    - Look at the image of the 2 nginx load balancers we will be creating
    - Create a node.js application to listen on port 9000, should console.log(the hostname)
    - create the Dockerfile for the node.js application
    - create the docker image of the nodejs application
    - use the image to spin up 3 new containers and do not expose the ports, use names
      nodeapp1, nodeapp2, nodeapp3

6.  Now write you Nginx configuration:
    1. create upstream server for the nodeapp services
    2. create a server that listens on port 8080 and forward all request to the node upstream

7. Read or explain the code in your nginx config

8. Networking and spinning up all the services
    - now create a Docker Network called backend_network_for_nginx
    - connects all the containers to the Network i.e (nginx_test_server, nodeapp1, nodeapp2, nodeapp3)
    - start all the nodeapp & the nginx container. see if everything is working as expected

9.  Solving image two problem
    - create another nginx container called ng2 using the same config, port 81:8080
    - stop the container and connect it to the backend_network_for_nginx network
    - start all the containers and test the different nginx on different ports

9.1 Read about exposing ports of your docker container

10. Now go and practice in real life from (question 5 to question 9)

11. Another task: write another nginx.conf configuration
    - write 2 upstreams (app1_backend, app2_backend)
    - let these upstreams group have 2 containers, let app1 listen on port 9000, and app2 on 8000
    - create 2 servers
    - let the 1st server listen on port 9000 with server_name app1.stanley.com and forward
      all request to app1_backend
    - let the 2nd server listen on port 9001 with server_name app2.stanley.com and forward
      all request to app2_backend
    - create the 3rd server to listen on port 80 with server_name static.stanley.com and
      let it serve files from the root







for ssl {
server {
    listen 443 ssl;
    server_name yourdomain.com;  # Replace with your domain name

    ssl_certificate /etc/ssl/certs/your_certificate.crt;  # Path to your SSL certificate
    ssl_certificate_key /etc/ssl/private/your_private.key;  # Path to your private key

    ssl_protocols TLSv1.2 TLSv1.3;  # Enforce strong protocols
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';  # Secure ciphers

    # Other configuration options as needed...
    location / {
        root /var/www/your-site;
        index index.html index.htm;
    }
}

}