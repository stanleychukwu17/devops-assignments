1 TailwindCss v4
  - Read: installation
    -
    pnpm i tailwindcss @tailwindcss/postcss
    if you're in a new environment, install the tailwind intellisense plugin for vsCode

  - Read: Core Configuration in CSS
    The most notable change is the deprecation of the tailwind.config.js file for most cases,
    Your main CSS file (e.g: app.css, global.css) is now where you'll import Tailwind and define
    your theme

    i.e @import "tailwindcss";

    You no longer need @tailwind base;, @tailwind components;, @tailwind utilities;
    The single @import "tailwindcss"; handles everything

  - Read: Automatic Content Detection
    * You no longer need to configure the content array in tailwind.config.js to tell Tailwind where
      to scan for class names
    * Tailwind v4 uses heuristics to automatically detect your template files, including ignoring files
      in your .gitignore.
    * If you do need to explicitly specify source files, you can use the @source directive in your CSS
      i.e:
        @import "tailwindcss";
        @source "./src/components/"; /* Scans this folder for Tailwind classes */

  - Read: Using Plugins
    You can import Tailwind CSS v4-compatible plugins directly in your CSS using the @plugin directive
    i.e:
      @import "tailwindcss";
      @plugin "@tailwindcss/typography";

      * For older, JavaScript-based plugins, you might still need to use a tailwind.config.js file
        and explicitly load it

  - Read: Backward Compatibility (Using a tailwind.config.js file)
    * While the default is CSS-first, you can still use a traditional tailwind.config.js JavaScript
      file for backward compatibility or more complex configurations (e.g., if you're using
      JavaScript-based plugins that haven't been updated for the CSS-first approach).

    * If you want to use a tailwind.config.js file, you need to explicitly load it in your main CSS
      file using the @config directive:

    i.e:
    @import "tailwindcss";
    @config "../../tailwind.config.js"; /* Adjust the path as needed */

  - Read: PostCSS Configuration
    * You'll still need a postcss.config.mjs (or postcss.config.js) file,
      add this to the file:

      // postcss.config.mjs
      export default {
        plugins: {
          "@tailwindcss/postcss": {},
        },
      };

     In v4, postcss-import and autoPreFixer are often handled automatically by Tailwind, so you might
     not need to include them explicitly anymore. 

  - Read: Vite Integration (Recommended)
    Tailwind CSS v4 has a first-party Vite plugin for optimal performance and minimal configuration

    pnpm install @tailwindcss/vite

    - Configure vite.config.ts (or .js)
      // vite.config.ts
      import { defineConfig } from 'vite';
      import tailwindcss from '@tailwindcss/vite';

      export default defineConfig({
        plugins: [
          tailwindcss(),
        ],
      });

1.1 theme and variants
  - The @theme Directive
    This is the primary way to customize your design tokens (colors, fonts, spacing, breakpoints, etc)
    in v4, It allows you to define CSS variables that Tailwind will use to generate utility classes
    e.g:
      @import "tailwindcss";

      @theme {
        --color-blonde-50: #eff6ff;
        --color-blonde-100: #dbeafe;
        --color-blonde-200: #bfdbfe;
        /* ... more colors */

        --font-display: "Smart", "sans-serif";
        --breakpoint-3xl: 1920px;
      }

      * When you define --color-* variables, Tailwind automatically generates corresponding
        color utility classes:
          <div class="bg-blonde-50 text-blonde-100">...</div>
        -
        it also generates variables that you can use directly in tailwind or in your css files:
          <div class="bg-[var(--color-blonde-50)] text-[var(--color-blonde-100)]">...</div>
        -
        you can also do:
          <div class="fill-(--my-brand-color)">...</div>
          -
          This is just a shorthand for fill-[var(--my-brand-color)]

      * Similarly, --breakpoint-* variables will create custom breakpoints you can use in
        responsive utilities (e.g., 3xl:text-lg)

  - Custom Utilities and Variants
    * You can define custom utilities using @utility
      e.g: in your css file
        @utility custom-url {
          color: var(--color-blonde-200);
          text-decoration: underline;
        }

        <a href="#" class="custom-url p-2 hover:no-underline> Hover over me </a>
    
    * Create custom variants with @variant:
      e.g: in you css file
        .custom-url-with-variant {
          text-decoration: underline;

          @variant hover {
            text-decoration: no-underline;
          }
        }

        <a href="#" class="custom-url-with-variant p-2> Hover over me </a>

    * you can now write things like:
      <div class="[mask-image:url('/some-mask.svg')]">
      <div class="bg-[var(--color-blonde-50)] text-[var(--color-text)]">
      or do: <div class="bg-(--color-blonde-50) text-(--color-text)">

2 some tips
  - using em & rem
    :em (Relative to Parent's Font Size)
      e.g:
        .parent {
          font-size: 16px;
        }
        .child {
          font-size: 1.5em; /* 1.5 times the parent's font size i.e: 24px */
        }

    :rem (Relative to Root Font Size)
      Advantages:
        - Scales based on the root element’s (html) font size (usually 16px by default)
        - More predictable and consistent because it’s not affected by parent font sizes like "em"
      e.g:
        html {
          font-size: 16px; /* Base size */
        }
        .header {
          font-size: 2rem; /* 32px */
        }

    :rem vs px
      - pixels are great for precise, fixed measurements but lack flexibility, accessibility,
        and responsiveness
      - rem are better for scalable, flexible, and accessible designs. They allow for more fluidity,
        respect user preferences, and adapt to different devices and screen sizes

    :using clamp() (CSS Function)
      - Great for responsive typography or sizing that needs to stay within certain limits
        (like a font size that scales between two breakpoints)
      e.g:
        .heading {
          /* Font size will scale between 16px and 32px, but never go outside that range */
          font-size: clamp(16px, 5vw, 32px);
        }

  - font-size calc
    - you can do for a header:
      font-size: calc(16px + 2vw)
      font-size: min(calc(16px + 2vw), 35px)
      font-size: clamp(28px, calc(16px + 2vw), 40px)

3 Text and colors
  - apply text color on an element (3 eg)
    text-green-100
    text-yellow-200
    text-gray-700

  - apply custom text color to an element (3 eg)
    text-[<custom_color>]
    text-[#f1f2f6]
    text-[#fff]
    text-[var(--color-blonde-50)]
    text-(--color-blonde-100)

  - apply background color to an element (3 eg)
    bg-green-100
    bg-yellow-200
    bg-gray-700

  - apply custom background color to an element (3 eg)
    bg-[<custom_color>]
    bg-[#f1f2f6]
    bg-[#fff]
    bg-[var(--color-blonde-50)]
    bg-(--color-blonde-100)

  - apply border on an element, also set the border color
    border -> border-width: 1px;
    border-green-700: set the border color to green

  - apply border with width value
    border-<width_value>
    border-2
    border-4
    border-8

  - border-top, border-right, border-bottom, border-left
    border-t-2
    border-r-4
    border-b-8
    border-l-12

  - border custom width
    border-[<custom_value>]
    border-[16px]
    border-[var(--custom-width)]

  - border custom color
    border-[<custom_color>]
    border-[yellow]
    border-[purple]
    border-[var(--color-blonde-50)]

  - how do you extend a custom color using @theme
    * in your global css file where you have @import "tailwindcss", do
      @theme {
        --color-<color_name>-<optional_color_number>: <color_value>;
      }

      e.g:
      @theme {
        --color-blonde-50: #eff6ff;
        --color-blonde-100: #dbeafe;
        --color-blonde-200: #bfdbfe;
      }

  - how do you use the custom color extend in @theme (using in text, background, border)
    text-blonde-50
    bg-blonde-100
    border-blonde-200

4 Typography with tailwindCss
  - Read: tailwind comes with 3 default font families
    * By default, Tailwind includes a few standard fonts for your project, and these fonts are part
      of the fontFamily utility
    
    1. sans:
        Font family: "Inter", "ui-sans-serif", "system-ui", "sans-serif"
    2. serif:
        Font family: "Georgia", "Cambria", "Times New Roman", "Times", "serif"
    3. mono:
        Font family: "MenLo", "Monaco", "Courier New", "monospace"

    using them be like:
      <div class="font-sans"></div>
      <div class="font-serif"></div>
      <div class="font-mono"></div>

  - using @theme, extend font-family
    @theme {
      --font-<customFont_1>: 'YourCustomSans', 'Arial', 'sans-serif';
      --font-<customFont_2>: 'YourCustomSerif', 'Arial', 'sans-serif';
    }
    e.g:
    @theme {
      --font-stanley: 'oneOfTheGreatest', 'Arial', 'sans-serif'
    }

    using them be like
      <div class="font-stanley"></div>

  - apply font-size (5 eg)
    text-xs
    text-sm
    text-lg
    text-2xl
    text-4xl e.t.c
  
  - apply font-size with css variable
    -
    body {
      --my-text-size: 20px;
    }

    syntax:
      text-(length:<custom-property>) -> font-size: var(<custom-property>);
    e.g:
      <p class="text-(length:--my-text-size)"> sit</p>

  - apply font-size with line-height (3 eg)
    syntax: text-size/line-height
    e.g:
      text-sm/6
      text-lg/7
      text-sm/8
      e.t.c

  - apply font-size with custom value (3 eg)
    text-[14px]
    text-[calc(16px + 2vw)]
    text-[clamp(16px, calc(16px + 2vw), 40px)]

  - using @theme, extend font-size
    @theme {
      --text-<custom_name>: <value>
    }

    e.g:
      @theme {
        --text-tiny: 0.625rem;
      }
      
      you can also provide default line-height, letter-spacing, and font-weight values for a font size:
      @theme {
        --text-tiny: 0.625rem;
        --text-tiny--line-height: 1.5rem; 
        --text-tiny--letter-spacing: 0.125rem; 
        --text-tiny--font-weight: 500; 
      }

    using them be like:
      <div class="text-tiny">...</div>

  - use the custom font-size and font-family in a custom class (i.e a utility class)

  - Read: font-smoothing

  - text-decoration: list the 4 types
  - how do you do "text-decoration-line" in tailwindCss
  - how do you do "text-decoration-color" in tailwindCss
  - how do you do "text-decoration-style" in tailwindCss
  - how do you do "text-decoration-thickness" in tailwindCss
  - Read: how do you do "text-underline-offset" in tailwindCss
  - task: convert the below css to tailwindCss:
    text-decoration: underline wavy red 5px;
  - how do you do line-height in tailwindCss (2 eg)












