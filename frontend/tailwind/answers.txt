
1 TailwindCss v4
  - installation
    pnpm i tailwindcss @tailwindcss/postcss
    - if you're in a new environment, install the tailwind intellisense plugin for vsCode

  - Core Configuration in CSS
    The most notable change is the deprecation of the tailwind.config.js file for most cases,
    Your main CSS file (e.g: app.css, global.css) is now where you'll import Tailwind and define
    your theme

    i.e @import "tailwindcss";

    You no longer need @tailwind base;, @tailwind components;, @tailwind utilities;
    The single @import "tailwindcss"; handles everything

  - The @theme Directive
    This is the primary way to customize your design tokens (colors, fonts, spacing, breakpoints, etc.) in v4,
    It allows you to define CSS variables that Tailwind will use to generate utility classes
    e.g:
      @import "tailwindcss";

      @theme {
        --color-blonde-50: #eff6ff;
        --color-blonde-100: #dbeafe;
        --color-blonde-200: #bfdbfe;
        /* ... more colors */

        --font-display: "Smart", "sans-serif";
        --breakpoint-3xl: 1920px;
      }

      * When you define --color-* variables, Tailwind automatically generates corresponding
        color utility classes (e.g., bg-blonde-50, text-blonde-100)
      * Similarly, --breakpoint-* variables will create custom breakpoints you can use in
        responsive utilities (e.g., 3xl:text-lg)

  - Automatic Content Detection
    * You no longer need to configure the content array in tailwind.config.js to tell Tailwind where
      to scan for class names
    * Tailwind v4 uses heuristics to automatically detect your template files, including ignoring files
      in your .gitignore.
    * If you do need to explicitly specify source files, you can use the @source directive in your CSS
      i.e:
        @import "tailwindcss";
        @source "./src/components/"; /* Scans this folder for Tailwind classes */

  - Using Plugins
    You can import Tailwind CSS v4-compatible plugins directly in your CSS using the @plugin directive
    i.e:
      @import "tailwindcss";
      @plugin "@tailwindcss/typography";

      * For older, JavaScript-based plugins, you might still need to use a tailwind.config.js file
        and explicitly load it

  - Custom Utilities and Variants
    * You can define custom utilities using @utility
      e.g: in your css file
        @utility custom-url {
          color: var(--color-blonde-200);
          text-decoration: underline;
        }

        <a href="#" class="custom-url p-2 hover:no-underline> Hover over me </a>
    
    * Create custom variants with @variant:
      e.g: in you css file
        .custom-url-with-variant {
          text-decoration: underline;

          @variant hover {
            text-decoration: no-underline;
          }
        }

        <a href="#" class="custom-url-with-variant p-2> Hover over me </a>

  - Backward Compatibility (Using a tailwind.config.js file)
    * While the default is CSS-first, you can still use a traditional tailwind.config.js JavaScript
      file for backward compatibility or more complex configurations (e.g., if you're using
      JavaScript-based plugins that haven't been updated for the CSS-first approach).

    * If you want to use a tailwind.config.js file, you need to explicitly load it in your main CSS
      file using the @config directive:

    i.e:
    @import "tailwindcss";
    @config "../../tailwind.config.js"; /* Adjust the path as needed */

  - PostCSS Configuration
    * You'll still need a postcss.config.mjs (or postcss.config.js) file to include the
      @tailwindcss/postcss plugin

      // postcss.config.mjs
      export default {
        plugins: {
          "@tailwindcss/postcss": {},
        },
      };

     In v4, postcss-import and autoPreFixer are often handled automatically by Tailwind, so you might
     not need to include them explicitly anymore. 
 
  - Vite Integration (Recommended)
    Tailwind CSS v4 has a first-party Vite plugin for optimal performance and minimal configuration

    pnpm install tailwindcss @tailwindcss/vite

    - Configure vite.config.ts (or .js)
      // vite.config.ts
      import { defineConfig } from 'vite';
      import tailwindcss from '@tailwindcss/vite';

      export default defineConfig({
        plugins: [
          tailwindcss(),
        ],
      });

      * Then, in your main CSS file, simply @import "tailwindcss";.

2 some tips
  - using em & rem
    :em (Relative to Parent's Font Size)
      Advantages:
        - Scales based on the font size of the parent element.
        - Useful for making designs relative to their containers.
        - Use em when you want elements (like padding, margins, or font sizes) to
          scale according to the parent’s font size
      e.g:
        .parent {
          font-size: 16px;
        }
        .child {
          font-size: 1.5em; /* 1.5 times the parent's font size, i.e., 24px */
        }

    :rem (Relative to Root Font Size)
      Advantages:
        - Scales based on the root element’s (html) font size (usually 16px by default)
        - More predictable and consistent because it’s not affected by parent font sizes
        - Use rem when you want your sizes (fonts, paddings, etc.) to be consistent across the
          entire page or website, no matter where the element is placed in the DOM
      e.g:
        html {
          font-size: 16px; /* Base size */
        }
        .header {
          font-size: 2rem; /* 32px */
        }

    :When to Use Which?
      - Use em for cases where you want the sizing to be flexible and adapt based on
        the context (like in nested components)
      - Use rem when you want a more global, consistent design that is easy to control
        from a single point (the root)

    :rem vs px
      - pixels are great for precise, fixed measurements but lack flexibility, accessibility,
        and responsiveness
      - rem are better for scalable, flexible, and accessible designs. They allow for more fluidity,
        respect user preferences, and adapt to different devices and screen sizes

    :using clamp() (CSS Function)
      - Combines multiple units to create a fluid value that respects both a minimum and maximum value
      - Great for responsive typography or spacing that needs to stay within certain limits
        (like a font size that scales between two breakpoints)
      e.g:
        .heading {
          /* Font size will scale between 16px and 32px, but never go outside that range */
          font-size: clamp(16px, 5vw, 32px);
        }

  - font-size calc
    - you can do for a header:
      font-size: calc(16px + 2vw)
      font-size: min(calc(16px + 2vw), 35px)
      font-size: clamp(28px, calc(16px + 2vw), 40px)

3 Text and colors
  - apply text color on an element (3 eg)
  - apply custom text color to an element (3 eg)
  - apply background color to an element (3 eg)
  - apply custom background color to an element (3 eg)
  - apply border on an element
  - apply border with width value
  - border-top, border-right, border-bottom, border-left
  - border custom width
  - border custom color
  - how do you extend a custom color using @theme
  - how do you use the custom color extend in @theme










