1.  App.tsx -> App.test.tsx
    itemDisplay.tsx -> itemDisplay.test.tsx

2.  getBy,      findBy,         queryBy
    getAllBy,   findAllBy       queryAllBy

3.  getByRole       getByLabelText      getByPlaceholderText        getByText
    getByAltText    getByTitle          getByTestId

4. const headingElement = await screen.findByText(/how far/i)

5.
    it("should not find any heading element", () => {
        render(<Header title="my header" />)
        const header = screen.queryByText(/dogs/i)
        expect(header).not.toBeInTheDocument()
    })

6.  const headingElement = screen.getAllByRole("heading")
    expect(headingElement.length).toBe(3)
    expect(headingElement).toHaveLength(3)

7.
    describe("Testing the cart total", () => {
        it("should add 5 products to the cart", () => { ... })
        it("should show $55.58 as total", () => { ... })
    })

8.
    it("should have empty input when add button is clicked", async () => {
        render(<AddInput />)

        const inpElement = screen.getByPlaceholderText(/add your todo/i)
        const btnElement = screen.getByRole("button", {name: /add/i})

        fireEvent.change(inpElement, {target: {value: "Buy Soap"}})
        fireEvent.click(btnElement)

        expect(inpElement.value).toBe("")
    })

9.
    beforeEach: The beforeEach() function runs every-time before each of your test runs
    afterEach: The afterEach() function runs every-time after each of your test runs
    beforeAll: The beforeAll() function runs once before any of your test starts/runs
    afterAll: The afterAll() function runs once after all your test have finished running

    e.g
    describe("Testing followerList", () => {
        beforeAll(() => { render the main component })
        afterAll(() => { clearAllMock, delete any data created to the database })

        beforeEach(() => { ... })
        afterEach(() => { clearAllMock() })

        it(" ... ", () => { ... })
        it(" ... ", () => { ... })
        it(" ... ", () => { ... })
    })

10.
    it("should load 6 more products", async () => {
        render(<App />)

        const btn = screen.getByRole("button", {name: /load more/i})
        fireEvent.click(btn)

        waitFor(async () => {
            const headingElement = await screen.findAllByRole("heading")
            expect(headingElement).toHaveLength(12)
        })
    })

11. expect(['a','b']).toHaveLength(2)
    expect(5).toEqual(5)
    expect(['a','b','c']).toContain('b')
    expect(fn).toThrow()
    expect(mock).toHaveBeenCalled()

12. userEvent.click(btnElement)
    userEvent.type(inpElement, "stanley"); simulates typing "stanley"
    await userEvent.keyboard('{Enter}'); // Simulate pressing the Enter key
    for the above, you can also do == .keyboard('{enter}'); // lowerCase Works too
    ---
    userEvent.click(element): Simulates a click event.
    userEvent.type(element, text): Simulates typing into an input or textarea.
    userEvent.dblClick(element): Simulates a double-click event.
    userEvent.selectOptions(select, options): Simulates selecting options from a <select> element.
    userEvent.hover(element): Simulates hovering over an element.
    userEvent.tab(): Simulates a tab key press.
    Important Notes
    Async Handling: Many userEvent functions return promises, so you often need to use await to ensure the actions
        complete before making assertions.
    Event Simulation: userEvent simulates interactions more closely to how users would, as opposed to fireEvent
        which may be lower-level.

13. {
    import { render, screen } from '@testing-library/react';
    import userEvent from '@testing-library/user-event';
    import MyForm from './MyForm';

    test('should submit form on Enter key press', async () => {
        render(<MyForm />);
        
        // Find the input field and submit button
        const input = screen.getByLabelText(/username/i);
        const submitBtn = screen.getByRole('button', { name: /submit/i });
        
        // Type into the input field
        await userEvent.type(input, 'test-user');
        
        // Simulate pressing the Enter key
        await userEvent.keyboard('{enter}');

        // Click on the submitBtn
        await userEvent.click(submitBtn)
        
        // Assert the expected behavior after the Enter key press
        expect(screen.getByText(/form submitted/i)).toBeInTheDocument();
    });
}

13.1 {
    Use userEvent when you want to simulate user interactions in a way that closely mirrors real user behavior.
        Itâ€™s especially useful for typing, multi-step interactions, and more complex scenarios.

    Use fireEvent for simpler cases where direct event dispatching is sufficient, or when you need to trigger
        events that are not covered by userEvent.
}

14.
    const mock = jest.fn()
    render(<UserForm onUserAdd={mock} />)

    expect(mock).toHaveBeenCalled()
    expect(mock).toHaveBeenCalledWith({name: "jane", email: "jane@jane.com"})

15.
    Below is the element
    <label htmlFor="email"> Enter email </label>
    <input id="email" data-testid="user_email" type="text" placeholder="enter your name" />

    scene.getByLabelText(/enter email/i)
    scene.getByRole("textBox", {name: /enter email/i})
    screen.getByPlaceholderText(/enter your name/i)
    scene.getByTestId("user_email")

16. when you use this method. it gives you a url that when you click on takes you to a web page that shows
    you your rendered component, when you hover over each element you'll see how you can select the elements
    from jest

17. How do you use within
    const rows = within(scene.getByTestId("users")).getAllByRole("rows")

18. it is used to logout the current state of your dom when you're testing. this will show you what your
    html dom looks like at the point where you used the screen.debug()

19. An Accessible name is the text inside an element
    e.g
    <button>Submit now</button>
    <div>
        <button aria-label="sign-in"><svg /></button>
        <button aria-label="sign-out"><svg /></button>
    </div>
    Answer:
    const submitBtn = scene.getByRole("button", {name: /submit now/i})
    const signOut = scene.getByRole("button", {name: /sign-out/i})

20.
    - To prove an element(s) exist, use:
        getBy, getAllBy
    - To prove an element(s) does not exist, use:
        queryBy, queryAllBy
    - To prove an element(s) eventually exists, use:
        findBy, findAllBy

21. 
    Answer 1 {
        function toContainRole(container, role, quantity = 1) {
            const elements = within(container).queryAllByRole(role)
            if(elements.length === quantity) {
                return {pass:true}
            }

            return {
                pass: false,
                message: () => `Expected to find ${quantity} ${role} elements`
            }
        }
        ---
        now add it to the "expect" list of methods
        expect.extend({toContainRole})
        ---
        in use
        expect(form).toContainRole("button", 2)
        form = container
        button = role
        2 = quantity
    }
    chatGPT version {
        function toContainRole(container, role, quantity = 1) {
            const elements = within(container).queryAllByRole(role);
            const pass = elements.length === quantity;

            return {
                pass,
                message: () => {
                    if (pass) {
                        return `the expected number of elements is found`;
                    } else {
                        return `Expected to find ${quantity} ${role} elements, but found ${elements.length}.`;
                    }
                },
            };
        }

        // Extending Jest's expect
        expect.extend({ toContainRole });
    }


22.
    for (let key in repository) {
        const value = repository[key]
        const element = screen.getByText(new RegExp(value))
        expect(element).toBeInTheDocument()
    }

23. 
    screen.findBy || findAllBy
    waitFor
    userEvent {
        e.g userEvent.click, userEvent.keyboard e.t.c (all userEvent)
    }

24. 
    const pause = () => {
        return new Promise(resolve => {
            setTimeout(() => {resolve();}, 100)
        })
    }

    it("should wait for data fetching to be completed", async () => {
        render(<Component />)

        screen.debug() // see what your component looks like before the data is fetched and the states are updated
        pause()
        screen.debug() // see what your component looks like after our data fetching is completed and the states have been updated
    })

25.
    jest.mock("../tree/FileIcon", () => {
        return () => {
            return "File Icon component have been mocked"
        }
    })
    Anywhere in this test that the FileIcon component is imported will receive this mocked version, you can use
    screen.debug() to verify that the mocked version is what has been rendered

26.
    In your test file HomeRoute.test.tsx
    import HomeRoute from "./HomeRoute"

    jest.mock("../hooks/useRepositories", () => {
        return () => {
            return {
                data : [{name: "react js"}, {name: "javascript"}],
                users: [{...}, {...}]
            }
        }
    })
    or
    jest.mock("../hooks/useRepositories", () => {
        return () => ({
            data: [{ name: "react js" }, { name: "javascript" }],
            users: [{...}, {...}]
        });
    });