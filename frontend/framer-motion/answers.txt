1. it is a hook from framer-motion that is mostly used to track the changes to motion values and also
    to update motion elements with out triggering the react re-render engine
    e.g:
    const x = useMotionValue(0)
    const y = useMotionValue(0)
    <motion.div style={{x,y}} />

    - some of the methods for useMotionValue are
    .get()  .set()  .stop() .velocity() .destroy() .jump()

2.  const x = useMotionValue(-200)
    const opacity = useTransform(x, [-200, 0, 200], [0,1,0])
    -
    return <motion.div drag="x" style={{x, opacity}} />

3.  const xInput = [-100, 0, 100]
    const opacityOutput = [0,1,0]
    const colorOutput = ['#f00', '#fff', '#0f0']

    const opacity = useTransform(x, xInput, opacityOutput)
    const color = useTransform(x, xInput, colorOutput)

4. useMotionTemplate creates a new motion value from a string template containing other motion values
    e.g-1:
    const x = useMotionValue(0)
    const transform = useMotionTemplate`transform(${x}px)`
    -
    return <motion.div style={{transform}} />

    e.g-2:
    const shadowX = useSpring(0)
    const shadowY = useMotionValue(shadowX)

    const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`

    return <motion.div style={{filter: shadow}} />

5. useScroll is used to track the scroll progress of the web page or to track the scroll progress
    in an element
    e.g:
    const {scrollX, scrollY, scrollXProgress, scrollYProgress} = useScroll()
    -
    scrollX & scrollY: are the absolute scroll position in pixels
    scroll[X/Y]Progress: are the scroll position between a defined value between(0 to 1)i.e(0-100%)

    e.g-2: We could show a page scroll indicator by passing scrollYProgress straight to the scaleX
        style of a progress bar
    -
    const {scrollYProgress} = useScroll()
    const scaleX = useSpring(scrollYProgress)
    -
    return <motion.div style={{scaleX}} />

6.
    const ref = useRef<HTMLElement>({} as HTMLElement)
    const {scrollXProgress} = useScroll({container: ref})

    <svg>
        <motion.circle
            cx={50}, cy={30} r={30} fill="purple" style={{pathLength: scrollXProgress}}
        />
    </svg>
    <ul ref={ref} style={{overflow-x: "scroll"}}>
        <li>...</li>
        <li>...</li>
        <li>...</li>
    </ul>

7.
    const ref = useRef<HTMLElement>({} as HTMLElement)
    const {scrollXProgress} = useScroll({
        target: ref,
        offset: [0.2, 0.5]
    })

    return <motion.div ref={ref}>...</motion.div>

    offset explanation {
        - the offset property specifies the range of the scroll progress that you're interested in
            Accepted values are: number, text("start"|"center"|"end"), pixels,
                                percentage(0% to 100%), viewport(vh and vw)
        offset: [0.2, 0.5]:
            0.2: This represents the start of the range, meaning you want to begin tracking the scroll
                progress when the scroll position is at 20% of the target element's height
            0.5: This represents the end of the range, meaning you want to stop tracking when the scroll
                position reaches 50% of the target element's height.

        offset: ["100px", "400px"]:
            you're specifying a range based on pixel values rather than percentages
            -
            "100px": The tracking of scroll progress will begin when the scroll position is at 100 pixels
                from the top of the target element
            "400px": This indicates the endpoint of the scroll range. The tracking will stop when the scroll
                position reaches 400 pixels from the top of the target element
    }

8. useSpring creates a motion value that will animate to its latest target with a spring animation.
    e.g
        const x = useMotionValue(0)
        const spring = useSpring(x, {stiffness: 1000, damping: 10})
        ...
        return <motion.div style={{x:spring}}>...</motion.div>
    
    - options that can be passed into the useSpring hook are: {
        stiffness: the higher the number, the stiffer the object/element
        damping: it is the oscillation force, the lower the number the higher the oscillation, the
                higher the number, the lower the oscillation
        mass: it is the weight of the element, the higher the mass the slower the spring effect in
            terms of the element movement, the lower the mass the faster the movement
        bounce: the lower the number, the higher the bouncing of the element
        velocity: specify the velocity at which you want the object to move
    }

9. The useTransform hook creates a new motion value that transforms the output of one or more motion values
    e.g:
    const opacity = useTransform(x, [-100, 0, 100], [0,1,0])
    const color = useTransform(x, [-100, 0, 100], ['#f00', '#fff', '#0f0'])
    const rotate = useTransform(scrollY, [0, 100], [0,360], {clamp:false, ease:"ask chatGPT 4 values"})
    // by setting clamp to false, the increment will continue to map even when the max input value
        has been reached. e.g if scrollY is 200, rotate = 720
    
    -- using functions to transform output values
    e.g:1
    const x = useMotionValue(0)
    const y = useSpring(0)
    const z = useTransform([x,y], (latestX, latestY) => latestX * latestY)
    return <motion.div style={{x,y,z}} />
    -
    e.g:2
    const x = useMotionValue(0)
    const y = useTransform(x, latestX => Math.cos(value/10) * 50) // creates a wavy effect
    return <motion.div style={{x,y}} />

10. Creates a motion value that tracks the velocity of another motion value. it accepts a motion value
    and returns a new one that updates with the provided motion values velocity
    e.g:
    const pink = (saturation: number): string => {
        return `hsl(327, ${saturation}%, 50%)`
    }
    const HomeComp = () => {
        const x = useMotionValue(0)
        const smooth = useSpring(x, {damping:50, stiffness:400})
            // with this stiffness and damping above, the element will be very heavy
        const velocity = useVelocity(smooth)
        const scale = useTransform(velocity, [-3000,0,3000], [2,1,2], {clamp:false})
        const backgroundColor = useTransform(
            velocity,
            [-3000,0,3000],
            [pink(100), pink(0), pink(100)]
        )

        return (
            <motion.div
                drag="x"
                dragElastic={1}
                dragConstraints={{left:-200, right:200}}
                style={{x, scale, backgroundColor}}
            />
        )
    }

----------

11. useAnimationControls can create animation controls that can be used to start/stop animations on one or
    more motion components or multiple animations together
    e.g
    function HomeComp () {
        const controls = useAnimationControls()

        useEffect(() => {
            controls.start({x:"100px", scale:2, transition:{duration:3}})
        }, [])

        const takeItBack = useCallback(() => {
            controls.start({x:0, scale: 1})
        }, [])

        return <motion.div animate={controls} onClick={takeItBack} />
    }

11.1    controls.start("hidden")
        controls.start("visible")
        controls.start("hover")

11.2
    const sequence = async () => {
        await menuControl.start({x:0})
        return await itemsControl.start({opacity:1})
    }
    sequence().then(() => {
        childrenControls.start({y:-50, color:'#fefefe'})
    })

11.3
    useEffect(() => {
        controls.start(i => ({
            opacity:0, x:100,
            transition: {delay: i*0.3}
        }))
    })
    return (
        <ul>
            <motion.li custom={0} animate={controls}>...</motion.li>
            <motion.li custom={1} animate={controls}>...</motion.li>
        </ul>
    )

11.4
    .set(definition): the .set() method does not perform any animations, it is just like the gsap.set(),
        it just sets the attr/properties of the element to the value received
        --
        with properties: controls.set({opacity: 0})
        with variants: controls.set("hidden")
    .start():
        controls.start("hover", {duration: .5, ease:"easeIn"}) // i.e (definition, transitionOverride)
        controls.start({x:0, transition: {duration: 1}})
    .stop(): stops the animation at the current timeline

12. useAnimationFrame: is an animation loop that provides the latest frame time to the provided
    callback function, it runs a callback once every animation frame 
    e.g
    useAnimationFrame((time, delta) => {
        ref.current.style.transform = `rotateY(${time}deg)`
    })

13. The useInView hook is a simple hook to let you know when an element is within the viewport
    const ref = useRef(null)
    const isInView = useInView(ref)

    useEffect(() => {
        console.log("Element is in view", isInView)
    }, [isInView])

    return <motion.div ref={ref} />
    --
    - What are the options that can be provided to the hook?
    1. root: RefObject<HTMLElement>
        By default, the element will be tracked as it enters & leaves the window's viewport,
        Set root to be the ref of a scrollable parent & it will use that parent to be the viewport instead
        e.g:
            const ref = useRef(null)
            const container = useRef(null)
            const isInView = useInView(ref, {root: container})
            return (
                <motion.div ref={container} style={{overflow: "scroll"}}>
                    <div />
                    <div />
                    <div />
                    <div ref={ref} />
                </motion.div>
            )
    2. once: boolean
        if you set to true, the useInView hook will stop observing the element once it hits true and will
        always return true. The default is false
    3. amount: "some"|"all"|number
        The amount of the item that needs to enter the viewport for useInView to return true.
        You can also use number from 0-1, The default is 0

14. e.g:
    <motion.circle
        cx={300} cy={400}
        animate={{
            cx: [300,600],
            cy: [400,0,400],
            transition: {
                cx: {times: [0, 1], duration: 1},
                cy: {times: [0, 0.5, 1], duration: 1},
            }
        }}
    />

    times: [0, 1] is mapping the keyframe [300,600] to [0, 1] which is saying let 300 occur at time 0% and
        let 600 occur at 100%
    times: [0, 0.5, 1] is mapping the keyframe [400,0,400] to [0, 0.5, 1] which is saying let 400 occur at time 0% and
        let 0 occur at 50% and finally let 400 occur at 100%

    e.g:2
    variant = {
        x: [null, 100, 0] // here if the value is animating, null will continue from the current value
    }

15. whileHover, whileTap, whileFocus, whileDrag, whileInView
    ---
    - whileHover: can be used with some more related props
    <motion.div
        whileHover={{scale: 1.2}}
        onHoverStart={(event, info) => console.log(info)}
        onHoverEnd={(event, info) => console.log(info)}
    />
    ---
    - whileTap: can be used with some more related props
    <motion.div
        whileTap={{scale: 1.2}}
        onTap={(event, info) => console.log(info.point.x, info.point.y)}
        onTapStart={(event, info) => console.log(info)}
        onTapCancel={(event, info) => console.log(info)}
    />

16. To enable motion layout animation, we simply set the layout prop of a motion component. e.g:
    <motion.div layout />
    -
    Any layout changes dat happens as a result of a re-render will b animated, dat could be a combination of:
    1. Re-ordering of a list
    2. A change in width, height or position
    3. A change in the parent layout e.g flexBox or grid

    ---
    - customizing layout animation duration
        <motion.div
            layout
            animate={{opacity:0.5}}
            transition={{
                opacity: {ease: "linear"}
                layout: {duration: 0.3}
            }}
    ---
    - talk about layout scroll prop
        <motion.div layoutScroll style={{overflow: "scroll"}}

17.
    - <motion.div drag /> or drag="x" or drag="y"
    - whileDrag={{scale:1.2}}
    - dragSnapToOrigin:
        If set to true, the draggable element will animate back to it's center/origin when released
    ---
    - dragConstraints:
        This will define a distance for the name edge of the draggable component
        You can pass in an object of optional (top, left, bottom, right) values measured in pixels
        e.g:
            <motion.div drag="x" dragConstraints={{left:0, right:300}} />
        Or you can pass in the ref to another component
        e.g:
            const MyComponent = () => {
                const container = useRef(null)
                return (
                    <motion.div ref={container}>
                        <motion.div drag dragConstraints={container} />
                    </motion.div>
                )
            }
    ---
    - dragElastic:
        The degree of movement allowed outside constraints, 0 = no movement, 1 = full movement,
        it is set to 0.5 by default
            <motion.div drag="x" dragConstraints={{left:0, right:300}} dragElastic={0.2} />
    - dragMomentum:
        Applies momentum to the component when dragging finishes. set to "true" by default
        {This drag momentum gives it that phone scroll feeling, might as well call it smooth scroll}
            <motion.div drag dragMomentum={false} />
    - dragPropagation:
        Allows drag gesture propagation to child components. Set to false by default
        e.g: <motion.div drag dragPropagation={true} />
    - dragTransition:
        dragTransition:inertiaOptions
        Allows you to change dragging inertia parameters. when releasing a draggable frame, an animation with type
        inertia starts. The animation is based on your dragging velocity. This property allows you to customize it
        <motion.div
            drag
            dragTransition={{bounceStiffness: 600, bounceDamping: 10}}
        />
    ---
    - onDrag, onDragStart, onDragEnd, onDirectionLock
        <motion.div
            drag
            onDrag={(event, info) => {console.log(event, info)}}
            onDragStart={(event, info) => {console.log(event, info)}}
            onDragEnd={(event, info) => {console.log(event, info)}}
            onDirectionLock={(axis) => {console.log(axis)}}
        />
        // onDirectionLock is a callback function that fires when a drag direction is determined

17.1
    - useDragControls: This hook is useful when you want to initiate dragging from a different component
        other than the draggable one. the hook exposes a "start" method that can start dragging from
        pointerDown events
        e.g:
        const dragControls = useDragControls()
        -
        function startDrag (event) {
            dragControls.start(event)
        }
        -
        return (
            <>
                <motion.div onPointerDown={startDrag}>...</motion.div>
                <motion.div drag="x" dragControls={dragControls}>...</motion.div>
            </>
        )
    ---
    - dragListener:
        Determines whether to trigger the drag gesture from event listeners. if passing dragControls,
        setting this to false will ensure that dragging can only be initiated by the controls, rather than a
        pointerDown event on the draggable element. The default is set to true.
        -
        <motion.div drag="x" dragListener={false} dragControls={dragControls} />

18. 
    -
    when: "beforeChildren"|"afterChildren"
        if an animation should play before it's children animation or after the children animation has
        been completed
    delayChildren: <time_in_seconds>
        how long to delay the children animation before they can start
    staggerChildren: <time_in_seconds>
        a delay between each child animation
    staggerDirection: 1 or -1
        where 1 is to stagger from top to bottom(Asc)
        And -1 is to stagger from bottom to top(Desc)
    ---
    - dynamic variant:
        const variant = {
            visible: i => ({x: 50, transition:{delay:i*0.3}})
        }
        -
        return items.map((item, index) => {
            <motion.li custom={index} animate={visible} variants={variant}>
                {item}
            </motion.li>
        })

19. 
    -
    const MyComponent = () => {
        const [scope, animate] = useAnimate()
        useEffect(() => {
            const animation = async () => {
                await animate(scope.current, {x:"100%"})
                animate("li", {opacity:1})
            }

            animation()
        }, [])

        return (
            <ul ref={scope}>
                <li />
                <li />
            </ul>
        )
    }
    ---
    - what can it be used for:
    It can be used to animate any HTML/SVG elements
    Create complex sequence of animations
    Control animations with time, speed, play(), pause() and other playback controls
    Animate single motion values
    e.g:
    const count = useMotionValue(0)
    const rounded = useTransform(count, (latest) => Math.round(latest))
    useEffect(() => {
        const animation = animate(count, 100, {
            type:"spring", stiffness:200, duration:10, onComplete: (x) => {...}
        })

        return animation.stop
    })
    return <motion.div> {rounded} </motion.div>
20.
    - Propagation
        Children can stop pointer events from propagating to their parents. e.g:
        <motion.div whileTap={{scale:2}}>
            <button onPointerDownCapture={e => e.stopPropagation()} />
            <div>...</div>
            <div>...</div>
        </motion.div>

    ---
    - whileInView
        using variant-variable
        <motion.div variants={boxVariant} initial="hidden" whileInView="visible" viewport={{once:true}} />
        -
        using targetOptions
        <motion.div
            initial={opacity: 0}
            whileInView={opacity: 1}
            viewport={{
                root:scrollable_containerRef,
                amount:some|all|number(default is some, where some = 0)
            }}
        />

----------

21.
    - List 3 types of transition:
        tween | spring | inertia

    - Types of built-in named easing functions:
        "linear"
        easeIn, easeOut, easeInOut
        circIn, circOut, circInOut
        backIn, backOut, backInOut
        anticipate

    - How do you ease with cubic-beiZer:
        ease: [0.17, 0.67, 0.83, 0.67] # x1,y1, x2,y2

    - How do you specify different easing functions for different "times" for different "keyframe" values
        visible: {
            x: [0, 50, 100, 0],
            transition: {
                x: {
                    times: [0, 0.3, 0.6, 1]
                    ease: ["easeIn", "easeOut", "circIn"]
                    repeat: Infinity
                    repeatDelay: 0.2
                }
            }
        }

    - How do you repeat an animation + specify a repeat type & specifying a delay for the repeat
        <motion.div
            ...
            transition={{
                repeat: number(i.e number of times) | Infinity 
                repeatType: loop | reverse | mirror
                repeatDelay time_in_seconds
            }}
        />
        repeatType explanation:
        - loop: Repeats the animation from the start
        - reverse: Alternates btw forward and backwards playback
        - mirror: switches from and to alternately

22. 
    value types that can be animated by motion:
        - Numbers: 0, 1000 e.t.c
        - Strings containing numbers: "0vh", "10px" e.t.c"
        - colors: hex, rgba, hsla
        - complex stings containing multiple numbers and colors (i.e "10px 0 #000")

    value type conversions:
        For html properties like x, y, width, height, top, left, bottom, right. their values can be animated
        freely between different value types. e.g
        -
        <motion.div
            initial={{x: "100"}}
            animate={{x: "calc(100vw-50%)"}}
        />
        -
        Additionally, any color type (hex, hsl, rgb) can animate btw each other

23.
    - how do you set origin of x,y,z axis (use number and text)
        {originX: 0.5, originY: 0.7, originZ: 1}
        {originX: left|center|right|top|bottom}
    
    - what properties do you animate when animating an svg
        pathOffset, pathLength

24.
    - List some animation props that can be received by a motion component
        initial, animate, variants, transition, exit, style

    - List some animation events that can be received by a motion component
        onUpdate, onAnimationStart, onAnimationComplete
        see more info on Book-19, Page 22

25. 
    MotionConfig can be used to set configurations for all child motion components. Currently, it only
    accepts one prop, transition
    e.g:
    import {motion, MotionConfig} from "framer-motion"
    <MotionConfig transition={{duration:1}}>
        <motion.div initial={{opacity:0}} animate={{opacity:1}} />
    </MotionConfig>

26. 
    The Reorder component can be used to crate drag-to-reorder lists, like reOrderable tabs or todo items e.g:
        import {Reorder} from "framer-motion"
        import {useState} from "react"

        function List () {
            const [items, setItems] = useState([0,1,2,3,4,5,6,7])

            return (
                <Reorder.Group axis="y" values={items} onReorder={setItems}>
                    {items.map(item => (
                        <Reorder.Item key={item} value={item}>
                            {item}
                        </Reorder.Item>
                    ))}
                </Reorder.Group>
            )
        }

    ---
    - how do you change the <Reorder.Group> default element used to render your items
        By default, the rendered item is <ul> but you can change this by using the "as" prop, i.e:
        <Reorder.Group as="ol">
    ---
    - how can we use dragControls with the re-order component?
        import {Reorder, useDragControls} from "framer-motion"

        function EachItem ({value}) {
            const controls = useDragControls()

            return (
                <Reorder.Item value={value} dragListener={false}> dragControls={controls}>
                    <div>{value}</div>
                    <div onPointerDown={ e => controls.start(e) } />
                </Reorder.Item>
            )
        }

27.
    - List at-least 5 motion value hooks (they're 8 in total)
    useMotionValue          useMotionTemplate           useScroll           useSpring
    useTime                 useTransform                useVelocity         useMotionValueEvent

    - List and talk about methods of these hooks
        .get()  .set()  .getVelocity()  .jump(newValue)     .stop()
        .isAnimating() 
        .on(event, ()=>{}) event: change | animationStart | animationComplete | animationCancel

    - Talk about the hook useMotionValueEvent
        useMotionValueEvent manages MotionValue event handlers throughout the lifecycle of a React component.
        Whenever the component is unmounted, the event handler will be safely unsubscribed automatically.
        -
        e.g:
        function Component () {
            const x = useMotionValue(0)

            useMotionValueEvent(x, "animationStart", () => { console.log("animation started") })
            useMotionValueEvent(x, "change", (latest) => { console.log(latest) })
            useMotionValueEvent(x, "animationComplete", () => { console.log("animation completed") })

            return <motion.div drag="x" style={{x}} />
        }