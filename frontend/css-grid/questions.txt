full_revision: 12 July 2025
full_revision: 21 Aug 2025
full_revision: 24 Sep 2025

1. Talk about grids

2.  - what are grid lines?
    - using a diagram, draw a grid with 6 columns and 4 rows, then highlight the grid lines
        {7-grid-column-lines, 5-grid-row-lines}

3. What is gap, write down the syntax
    - set gap both the row and column at once
    - set gap separately for the row and column

4.  - How do you tell your grid how many columns and rows to have
    - give us a grid with (4 columns @300px), (2 columns @200px), (3 rows @50px) (2 rows @100px)

5. Explain these terms, and give examples
    - display: grid
    - gap 15px 10px
    - grid-template-columns:
    - grid-template-rows:
    - grid-template-areas:
    - grid-column
    - grid-row
    - grid-area

5.1 Explain
    - grid-column: 3 / -1
    - grid-row: 1 / -1
    - grid-area: 1/3/-1/-1

6. Explain the following:
    - grid-column: 1 / span 3
    - grid-column: span 3
    - grid-column: span 1
    - grid-column: 2 / 6
    - grid-column: 1 / 7
    - grid-column: 2
    - grid-column: 5
    - grid-column: 1 / -1
    - grid-column: 3 / -1

7. Explain the following
    - grid-template-columns: 100px 200px 300px
    - grid-template-rows: repeat(2, 1fr) repeat(3, 200px)

8. Talk about
    justify-content & align-content
    justify-items & align-items
    justify-self & align-self

9. Explain
    .container {
        display: grid
        grid-template-rows: 100px 50px 1fr
        grid-template-columns: 100px 50px 2fr 1fr
        width: 1000px
        height: 1000px
    }
    - in the rows: what will be the final value for 1fr
    - in the columns: what will be the final value for 2fr and 1fr

10. Explain
    - grid-template-columns: repeat(3, 200px) repeat(2, 1fr);
    - grid-template-columns: repeat(2, 100px) repeat(3, 3fr) repeat(2, 1fr);
      - {the below questions might be tricky, chatGPT helped me with the answer}
      - what will be the value of (3, 3fr)
      - what will be the value of (2, 1fr)

11.
    - Draw the following diagram using the html & css below:
        <div class="container">
            <div class="item1">1</div>
            <div class="item2">2</div>
            <div class="item3">3</div>
        </div>
        .container {
            display: grid
            grid-template-rows: repeat(5, 100px)
            grid-template-columns: repeat(5, 100px)
        }
    - now use the following classes to draw out the items on the grid
        .item1 {
            grid-row: 2/4;
            grid-column: 2/4;
        }
        .item2 {
            grid-row: 1/3;
            grid-column: 5;
        }
        .item3 {
            grid-row: 2/5;
            grid-column: 3/5;
        }
    - When 2 or more grid items overlap each other, how do you organize them to have your choice on top
        (overlap .item1 over .item3) {Because naturally .item3 will overlap .item1}

12. - What is grid-area and what is it syntax
    - Using grid-area, replace grid-column & grid-row for .item1, .item2 & .item3

13. - Explain:
        .container {
            display: grid
            grid-template-rows: repeat(5, 100px)
            grid-template-columns: repeat(5, 100px)
            grid-template-areas:
            "   .   .   .   .   .   "
            "   .   .   .   .   .   "
            "   .   .   .   .   .   "
            "   .   .   .   .   .   "
            "   .   .   .   .   .   "
            ;
        }

    - NOT NEEDED : why developers don't often use grid-template-areas

14. - Draw out the layout for the grid template
        .container {
            display: grid
            grid-template-rows: repeat(5, 100px)
            grid-template-columns: repeat(5, 100px)
            grid-template-areas:
            "   item3       .           .           .           .       "
            "   item3       item2       item2       item2       item2   "
            "   item3       item1       item1       .           .       "
            "   .           item1       item1       .           .       "
            "   .           .           .           .           .       "
            ;
        }

    - for each of (.item1, .item2, .item3), write out the (grid-row, grid-column, grid-area)


15. From the template below, what will be the grid-template-area
    images/4-grid-template-ask
    copy the below to a new tab and fill it in based on the image {
        .container {
            display: grid;
            grid-template-rows: repeat(5, 1fr)
            grid-template-columns: repeat(6, 1fr)
            grid-template-areas:
            "   .       .       .       .       .       .   "
            "   .       .       .       .       .       .   "
            "   .       .       .       .       .       .   "
            "   .       .       .       .       .       .   "
            "   .       .       .       .       .       .   "
            ;

            .item1 {
                grid-area:
            }
            .item2 {
                grid-area:
            }
            .item3 {
                grid-area:
            }
            .item4 {
                grid-area:
            }
            .item5 {
                grid-area:
            }
        }
    }

16. How do you make a product display card responsive
    e.g i want 6 items columns on desktop
        i want 3 items columns on tablet screen-1025px
        i want 1 item column on phone screen-767px

    see images/5-responsive-design.png to see expected layout result
    - use media-query to solve it
    - use auto-fit

17. what is the difference between auto-fit and auto-fill

18. So from example 16, when you use "auto-fit", you can not accurately predict the number
    of rows that each screen size will have, so how do you attend to these spontaneous
    rows?

19. Read:
    Read the answer to see why we did grid-auto-flow: row & grid-auto-rows: 100px
    note: by default, grid-auto-flow is row (i.e: grid-auto-flow: row)
    .container {
        ...
        grid-auto-flow: row
        grid-auto-rows: 100px
    }
    - also what about for columns
    .container2 {
        ...
        grid-auto-flow: column
        grid-auto-columns: 100px
    }
