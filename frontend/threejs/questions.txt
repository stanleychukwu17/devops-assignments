full_revision: 28 July 2025
full_revision: 21 Aug 2025
full_revision: 24 Sep 2025

1 - Read: introduction
  - Read: installing react-three-fibre
  - Read: see some of the ecosystem of react-three-fibre

1.1 Some General Knowledge
  - Read: types of Geometries and their args
  - Math.PI in rotation = 180deg
  - Read: see the different types of light in 3.js

2 Transforming objects
  - Name 3 ways to to transform an object
  - Read a little about object transformation
  - where do all 3 axis face in 3.js, draw the axis
  - How do you make the camera look at an object

3 Test your Knowledge, work on a simple 3.js scene (do not use A.I assistance)
  - open the ./task/src/components/Task0/Task0.tsx and write your code there:

  - cd task & pnpm run dev to start your server
  - import the Task0 component in the App.tsx for the world to see
  - import all you need from react and the three.js package (e.g Canvas, * as THREE)
  - you'll be needing SoftShadows, OrbitControls & MeshWobbleMaterial from drei

  - create a Box component that returns a box Geometry
    - let the component receive 4 arguments
      "position": for the position of the box on the 3D scene
      "args": the dimensions of the box
      "color": the color for each box
      "hoverColor": the color to transform to when hovered over
      -
    - let the Box castShadow (i.e use the castShadow prop)
    - use useFrame delta to rotate the box on its x-axis & y-axis
    - when the box is clicked on, toggle the scale of the box
    - when the box is hovered on, change the material color of the box
    - use useCursor to change the mouse pointer when the object is hovered (try progress, move, wait, grabbing, none)

  - create the main App component and add your Canvas component
    - use shadows prop in the Canvas component
    - use camera prop in the Canvas component
      - let the camera use a fov of 60 (fov is field of view)
      - camera position should be x:-5, y:2, z:10
    - render your "SoftShadows" from drei inside the Canvas component

  - add a group element (inside you'll render the boxes and the planeGeometry for your shadow)
    - using the Box component, render 3 boxes in the group
    - add a new planeGeometry mesh in the group
      - use the receiveShadow prop
      - let it use a shadowMaterial with props attach="material" & opacity=0.3 or 1.3
      - rotate the planeGeometry on the x-axis by -90deg so that it would be the flat plane
      - bring the plane downward so that it is below the boxes (i.e position downward on the y-axis)

  - add an ambientLight to the scene, use (0.3 or Math.PI/2) for the intensity
  - add a directionalLight mainly for the shadow and use the following props:
    - let this light castShadow
    - position: x:2, y:5, z:1
    - intensity: (1.5 or Math.PI)

  - add another directionalLight or add a pointLight and use the following props
    - position: x:-3, y:5, z: -2
    - intensity: 0.5

  - üëèüèæ clap for yourself, nice job wel-done!
    - stop the code from running
    - allow the code to remain here, we will use it in the future

4 useFrame hook
  - what can you say about the useFrame hook
  - what can you say about the "state" and "delta" callback arguments
  - advanced usage, how do you use the useFrame hook with priority
  - Read: some of the properties available in the "state" callback arguments (11 listed)

5 useFrame exercise
  - use it to rotate an object on the y-axis
  - use it to make a camera move closer to an object
  - use it to detect the size of the screen and scale an object based on the screen size
  - Read: some tips of accessing the state object outside of useFrame

6 drei package
  - Read: some of it's useful helpers
  - what helper from drei helps you rotate around your scene, zoom in and out of your scene
  - give an example of MeshWobbleMaterial from drei
  - give an example of MeshDistortMaterial from drei
    - Read: explanation of the hooks we used in this task

7 useHelper hook from drei
  - talk about the useHelper hook
  - visualize axes using the AxesHelper
  - visualize grids using the GridHelper
  - visualize light sources using any of the following:
    SpotLightHelper, PointLightHelper, DirectionalLightHelper
  - visualize the bounding box of an object using the BoxHelper

7.1 useHelper challenge
  using the code from task:3
  - add a axesHelper, tip: use "scale" prop to make the axesHelper bigger
  - add a gridHelper, tip: use "scale", also use "position" to move the grid
  - add DirectionalLightHelper for the 2 lights in your scene
  - add BoxHelper for all cubes in the scene

8 Leva package
  - Talk about the leva package
  - Read: Example 1
  - Read: Conditionally show fields
  - Read: Folders
  - Read: Nested folders
  - Read: Input Types

8.1 Leva challenge
  using the code from task:3
  - use leva to control the lightColor and lightIntensity of a directionalLight
  - use leva to adjust the color and the args of a boxGeometry


