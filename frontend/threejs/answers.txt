1 - Read: introduction
      React-three-fibre is a react renderer for three.js. it helps you build your scene declaratively with
      re-useable, self-contained components that react to state, are readily interactive and can participate
      in React's ecosystem

    *Warning:
      React-three-fibre is a react renderer, it must pair with a major version of react, just like react-dom,
      react-native e.t.c @react-three/fiber@8 pairs with react@18, @react-fiber@9 pairs with react@19

    *Does it have limitations?:
      None, everything that works in three.js will work here without exceptions

    *Is it slower than plain three.js:
      No, there is no overhead, components render outside of React, it outperforms plain three.js in scale due
      to react's scheduling abilities

    *Can it keep up with frequent feature updates to three.js:
      Yes. it merely expresses three.js in JSX, <mesh /> dynamically turns into a new THREE.Mesh(). if a new
      three.js version adds, removes or changes features, it will be available to you instantly without
      depending on updates to this library

  - Read: installing react-three-fibre
    pnpm install three @types/three @react-three/fibre

  - Read: see some of the ecosystem of react-three-fibre
    There is a vibrant and extensive eco system around three-fiber full of libraries, helpers and abstractions
    -
    - @react-three/drei: useful helpers, this is an ecosystem in itself
    - @react-three/gltFjx: turns GLTFs into JSX components
    - @react-three/postProcessing: post processing effects
    - @react-three/test-renderer: for unit tests in node
    - @react-three/flex: flexBox for react-three-fiber
    - @react-three/xr: VR/AR controllers and events
    - @react-three/cannon: 3D physics using canon
    - create-r3f-app next: nextjs starter

2 Transforming objects
  - Name 3 ways to to transform an object
    1. position   2. scale    3. rotation

  - Read a little about object transformation
    -
    All the objects that inherits from "Object3D" possesses these transformation properties: (i.e scale,
    rotation, position). If ypu go to 3.js doc, you'll see the classes of each objects(i.e the classes
    they inherit from)
    e.g:
      for a mesh: Object3D -> Mesh
      for a group: Object3D -> group
      for a perspective camera: Object3D -> Camera -> Perspective Camera

    To adjust any of the 4 properties above, we can manipulate the x,y,z axis on each of the properties
    e.g:
      mesh.position.x = 2;
      mesh.position.y = 1.5;
      mesh.position.z = -0.2;
      mesh.position.set(x,y,z) e.g: mesh.position.set(2,1.5,-0.2)

    The position and scale property inherits from the "vector3" class, and this "vector3" class has
    many useful methods, some of them are:

    - mesh.position.length(): gives you the distance of an object from the center of the scene
    - position.distanceTo(camera.position): gives you the distance btw the camera and the mesh
    - position.normalize(): takes the length of your "vector3" object and reduces it until it is 1,
        there by bringing the object back to the center of the scene
    - position.set(x,y,z): set all 3 axis at once, you can also do mesh.scale.set(x,y,z)

  - where do all 3 axis face in 3.js, draw the axis
      in three.js:
      y
      |
      |
      |__ __ __ x
      z

      in blender front-view (1)
      z
      |
      |
      |__ __ __ x
      y

  - How do you make the camera look at an object
    "Object3D" instances have a .lookAt() method which rotates the object so that its z faces the target
    you provided. the target must be a vector3. this is mostly used for the camera
    e.g:
    camera.lookAt(new THREE.Vector3(0,0,0))
    camera.lookAt(mesh.position)

2.1 Some General Knowledge
  - Read: types of Geometries and their args
    NOTE * means optional
    - BoxGeometry:
      new THREE.BoxGeometry(1, 1, 1);
      args = width, height, depth, widthSegments*, heightSegments*, depthSegments*
      args explanation {
        width: The width of the box (along the X-axis).
        height: The height of the box (along the Y-axis).
        depth: The depth of the box (along the Z-axis).
        widthSegments (optional): The number of segments along the width of the box (defaults to 1).
        heightSegments (optional): The number of segments along the height of the box (defaults to 1).
        depthSegments (optional): The number of segments along the depth of the box (defaults to 1).
      }

    - SphereGeometry:
      new THREE.SphereGeometry(1, 32, 32)
      args = radius, widthSegments, heightSegments, phiStart*, phiLength*, thetaStart*, thetaLength*

    - PlaneGeometry:
      new THREE.PlaneGeometry(5, 5);
      args = width, height, widthSegments*, heightSegments*

    - CylinderGeometry:
      new THREE.CylinderGeometry(1, 1, 5, 32)
      args = radiusTop, radiusBottom, height, radialSegments, heightSegments*, openEnded*, thetaStart*, thetaLength*

    - ConeGeometry:
      new THREE.ConeGeometry(1, 5, 32)
      args = radius, height, radialSegments, heightSegments*, openEnded*, thetaStart*, thetaLength*
    
    - TorusGeometry:
      new THREE.TorusGeometry(1, 0.4, 16, 100)
      args = radius, tube, radialSegments, tubularSegments, arc*
    
    - TorusKnotGeometry
    - DodecahedronGeometry
    - IcosahedronGeometry
    - OctahedronGeometry
    - RingGeometry
    - LatheGeometry
    - ExtrudeGeometry
    - ShapeGeometry
    - BufferGeometry
    - CircleGeometry

  - Math.PI in rotation = 360deg
    When you see something like Math.PI used in mesh.rotation, it usually refers to rotating an object
    by 180 degrees (since π radians = 180°).
    e.g:
      useFrame((state, delta) => {
        meshRef.current.rotation.y += Math.PI * delta; // rotate 180° per second
      });
    
    Math.PI ≈ 3.14159 radians = 180°
    Math.PI / 2 = 90°
    2 * Math.PI = 360° (full rotation)
  
3. see ./task/3

4 useFrame hook
  - what can you say about the useFrame hook
    This hook is provided by r3f, it is used to run code on every frame, similar to the
    requestAnimationFrame loop in the native three.js. This is useful for animations,
    interactions or any updates that need to occur continuously

  - what can you say about the "state" and "delta" callback arguments
    e.g useFrame((state, delta) => {
      // state: The r3f root state (includes camera, scene, clock)
      // delta: time elapsed since the last frame in seconds
    })

  - advanced usage, how do you use the useFrame hook with priority
    e.g:
      useFrame(callback, priority = 0) // runs before 1
      useFrame(callback, priority = 1) // runs before 2
      useFrame(callback, priority = 2) // runs after everything (i.e after 1 & 2)

  - Read: some of the methods and properties available in the "state" callback arguments

    clock:    THREE.Clock, Used to get the elapsed time and delta
    camera:   THREE.camera, The active camera in the scene, useful for animations involving camera
    scene:    THREE.scene, the main scene graph
    size:     {width, height, aspectRation, ...}, viewport dimensions, useful for responsive UI or camera controls
    viewport: {width, height, factor, distance, ...}, scene relative view size (especially useful in Orthographic mode)
    mouse:    THREE.Vector2, mouse position in normalized device coordinates (NDC): [-1,1]
    pointer:  THREE.Vector2, Raw pixel pointer position
    controls: Any, if you're using @react-three/drei controls like OrbitControls, the may be available here
    events:   Object, Event system used by r3f (pointer, drag, scroll)
    invalidate: Function, Force a manual re-render of the scene
    performance: {current, min, max, debounce}, performance tuning system (automatically down-sampling frames if FPS drops)


5 useFrame exercise
  - use it to rotate an object on the y-axis
    useFrame((state, delta) => {
      meshRef.current.rotation.y = clock.getElapsedTime()
      or
      meshRef.current.rotation.y += delta
    })

  - use it to make a camera move closer to an object
    useFrame(({camera}, delta) => {
      camera.position.lerp(mesh.current.position, 0.5)
      camera.lookAt(mesh.current.position)
    })

    you can use an alternative method: "lerpVectors":
    : camera.position.lerpVectors(camera.position, targetPos, 0.1)

  - use it to detect the size of the screen and scale an object based on the screen size
    useFrame(({size}, delta) => {
      const isMobile = size.width <= 768

      if (isMobile) {
        meshRef.current.scale.set(0.5, 0.5, 0.5)
      } else {
        meshRef.current.scale.set(1,1,1)
      }
    })

  - how do you access the state object outside of useFrame
    useThree(): by using the useThree hook, you can access the "state" object outside of react
    e.g:
      const {camera, size, clock} = useThree()    







  