1 - Read: introduction
    *Warning:
      React-three-fibre is a react renderer, it must pair with a major version of react, just like react-dom,
      react-native e.t.c @react-three/fiber@8 pairs with react@18, @react-fiber@9 pairs with react@19

    *Does it have limitations?:
      None, everything that works in three.js will work here without exceptions

    *Is it slower than plain three.js:
      No, there is no overhead, components render outside of React, it outperforms plain three.js in scale due
      to react's scheduling abilities

    *Can it keep up with frequent feature updates to three.js:
      Yes. it merely expresses three.js in JSX, <mesh /> dynamically turns into a new THREE.Mesh(). if a new
      three.js version adds, removes or changes features, it will be available to you instantly without
      depending on updates to this library

  - Read: installing react-three-fibre
    pnpm install three @types/three @react-three/fibre

  - Read: see some of the ecosystem of react-three-fibre
    There is a vibrant and extensive eco system around three-fiber full of libraries, helpers and abstractions
    -
    - @react-three/drei: useful helpers, this is an ecosystem in itself
    - @react-three/postProcessing: post processing effects
    - @react-three/test-renderer: for unit tests in node
    - @react-three/flex: flexBox for react-three-fiber
    - @react-three/xr: VR/AR controllers and events
    - @react-three/cannon: 3D physics using canon

1.1 Some General Knowledge
  - Read: types of Geometries and their args
    NOTE * means optional
    - BoxGeometry:
      new THREE.BoxGeometry(1, 1, 1);
      args = width, height, depth, widthSegments*, heightSegments*, depthSegments*
      args explanation {
        width: The width of the box (along the X-axis).
        height: The height of the box (along the Y-axis).
        depth: The depth of the box (along the Z-axis).
        widthSegments (optional): The number of segments along the width of the box (defaults to 1).
        heightSegments (optional): The number of segments along the height of the box (defaults to 1).
        depthSegments (optional): The number of segments along the depth of the box (defaults to 1).
      }

    - SphereGeometry:
      new THREE.SphereGeometry(1, 32, 32)
      args = radius, widthSegments, heightSegments, phiStart*, phiLength*, thetaStart*, thetaLength*

    - PlaneGeometry:
      new THREE.PlaneGeometry(5, 5);
      args = width, height, widthSegments*, heightSegments*

    - CylinderGeometry:
      new THREE.CylinderGeometry(1, 1, 5, 32)
      args = radiusTop, radiusBottom, height, radialSegments, heightSegments*, openEnded*, thetaStart*, thetaLength*

    - ConeGeometry:
      new THREE.ConeGeometry(1, 5, 32)
      args = radius, height, radialSegments, heightSegments*, openEnded*, thetaStart*, thetaLength*
    
    - TorusGeometry:
      new THREE.TorusGeometry(1, 0.4, 16, 100)
      args = radius, tube, radialSegments, tubularSegments, arc*
    
    - TorusKnotGeometry
    - CircleGeometry
    - RingGeometry
    - DodecahedronGeometry
    - IcosahedronGeometry
    - OctahedronGeometry
    - LatheGeometry
    - ExtrudeGeometry
    - ShapeGeometry
    - BufferGeometry
    - primitive

  - Math.PI in rotation = 180deg
    When you see something like Math.PI used in mesh.rotation, it usually refers to rotating an object
    by 180 degrees (since π radians = 180°).
    e.g:
      useFrame((state, delta) => {
        meshRef.current.rotation.y += Math.PI * delta; // rotate 180° per second
      });
    
    Math.PI ≈ 3.14159 radians = 180°
    Math.PI / 2 = 90°
    2 * Math.PI = 360° (full rotation)

    Math.PI can also be used for light intensity, Where Math.PI = 3.13

  - Read: see the different types of light in 3.js
    see ./images/1.1/types-of-3js-lights.jpg

2 Transforming objects
  - Name 3 ways to to transform an object
    1. position   2. scale    3. rotation

  - Read a little about object transformation
    -
    All the objects that inherits from "Object3D" possesses these transformation properties: (i.e scale,
    rotation, position). If you go to 3.js doc, you'll see the classes of each objects(i.e the classes
    they inherit from)
    e.g:
      for a mesh: Object3D -> Mesh
      for a group: Object3D -> group
      for a perspective camera: Object3D -> Camera -> Perspective Camera

    To adjust any of the 3 properties, we can manipulate the x,y,z axis on each of the properties
    e.g:
      mesh.position.x = 2;
      mesh.position.y = 1.5;
      mesh.position.z = -0.2;
      mesh.position.set(x,y,z) e.g: mesh.position.set(2,1.5,-0.2)

    The position and scale property inherits from the "vector3" class, and this "vector3" class has
    many useful methods, some of them are:

    - mesh.position.length(): gives you the distance of an object from the center of the scene
    - position.distanceTo(camera.position): gives you the distance btw the camera and the mesh
    - position.normalize(): takes the length of your "vector3" object and reduces it until it is 1,
        there by bringing the object back to the center of the scene
    - position.set(x,y,z): set all 3 axis at once, you can also do mesh.scale.set(x,y,z)

  - where do all 3 axis face in 3.js, draw the axis
      in three.js:
      y
      |
      |
      |__ __ __ x
      z

      in blender front-view (1);        in blender side-view (3);
      z                                  z
      |                                  |
      |                                  |
      |__ __ __ x                        |__ __ __ y
      y                                  x

  - How do you make the camera look at an object
    "Object3D" instances have a .lookAt() method which rotates the object so that its z faces the target
    you provided. the target must be a vector3. this is mostly used for the camera
    e.g:
    camera.lookAt(new THREE.Vector3(0,0,0))
    camera.lookAt(mesh.position)

3. see ./task/src/components/Task3/Task3.tsx

4 useFrame hook
  - what can you say about the useFrame hook
    This hook is provided by r3f, it is used to run code on every animations frame,
    (i think the default is 24fps), similar to the requestAnimationFrame loop in the
    native three.js. This is useful for animations, interactions or any updates that
    need to occur continuously

  - what can you say about the "state" and "delta" callback arguments
    e.g useFrame((state, delta) => {
      // state: The r3f root state (includes camera, scene, clock)
      // delta: time elapsed since the last frame in seconds (i.e difference in secs btw each frame)
    })

  - advanced usage, how do you use the useFrame hook with priority
    e.g:
      useFrame(callback, priority = 0) // runs before 1
      useFrame(callback, priority = 1) // runs before 2
      useFrame(callback, priority = 2) // runs after everything (i.e after 1 & 2)

  - Read: some of the properties available in the "state" callback arguments (11 listed)
    clock:    THREE.Clock, Used to get the elapsed time and delta
    camera:   THREE.camera, The active camera in the scene, useful for animations involving camera
    scene:    THREE.scene, the main scene graph
    size:     {width, height, aspectRatio, ...}, viewport dimensions, useful for responsive UI or camera controls
    viewport: {width, height, factor, distance, ...}, scene relative view size (especially useful in Orthographic mode)
    mouse:    THREE.Vector2, mouse position in normalized device coordinates (NDC): [-1,1]
    pointer:  THREE.Vector2, Raw pixel pointer position
    controls: Any, if you're using @react-three/drei controls like OrbitControls, the may be available here
    events:   Object, Event system used by r3f (pointer, drag, scroll)
    invalidate: Function, Force a manual re-render of the scene
    performance: {current, min, max, debounce}, performance tuning system (automatically down-sampling frames if FPS drops)

5 useFrame exercise
  - use it to rotate an object on the y-axis
    useFrame((state, delta) => {
      meshRef.current.rotation.y = state.clock.getElapsedTime()
      or
      meshRef.current.rotation.y += delta
    })

  - use it to make a camera move closer to an object
    useFrame(({camera}, delta) => {
      camera.position.lerp(mesh.current.position, 0.5)
      camera.lookAt(mesh.current.position)
    })

    you can use an alternative method: "lerpVectors":
    : camera.position.lerpVectors(camera.position, targetPos, 0.1)

  - use it to detect the size of the screen and scale an object based on the screen size
    useFrame(({size}, delta) => {
      const isMobile = size.width <= 768

      if (isMobile) {
        meshRef.current.scale.set(0.5, 0.5, 0.5)
      } else {
        meshRef.current.scale.set(1,1,1)
      }
    })

  - how do you access the state object outside of useFrame
    useThree(): by using the useThree hook, you can access the "state" object outside of react
    e.g:
      import { useThree } from '@react-three/fiber'
      const {camera, size, clock} = useThree()

6 drei package
  - Read: some of it's useful helpers
    Controls:
      CameraControls, FlyControls, MapControls, DeviceControls, DeviceOrientationControls,
      MotionPathControls, OrbitControls

    Misc:
      wireframe, useCamera, useCursor, useTrail, useIntersect

    material:
      MeshDistortMaterial, MeshWobbleMaterial

  - what helper from drei helps you rotate around your scene, zoom in and out of your scene
    you use the "OrbitControls" helper
    e.g:
      import { OrbitControls } from @react-three/drei
      return (
        <Canvas>
          <Box />
          <OrbitControls />
        </Canvas>
      )

    you can customize the settings using props, ask chatGPT for more on the props
      - enableZoom:	Enables/disables zooming (wheel/pinch). Default: true
      - enablePan	Enables/disables panning. Default: true
      - enableRotate	Enables/disables rotation. Default: true
      {You can also set the zoomSpeed, panSpeed, rotateSpeed. they're all set to "1" by default}
      - target: A [x, y, z] array that sets the focus point (what the camera orbits around).
      - minDistance / maxDistance: Clamp the zoom range
      - minPolarAngle / maxPolarAngle: Clamp the vertical orbit angle (in radians)

    When working with perspective camera which is the default, if you want to prevent the camera
    from rotating below the ground plane, you should limit the polar angle:
      - minPolarAngle: Minimum vertical angle (up/down)
      - maxPolarAngle: Maximum vertical angle
      e.g:
        <OrbitControls
          minPolarAngle={0}           // does not allow user rotate beyond the ground plane horizontally, i.e 0-deg
          maxPolarAngle={Math.PI / 2} // limit to top hemisphere, i.e 90-deg
        />

  - give an example of MeshWobbleMaterial from drei
    import { MeshWobbleMaterial } from @react-three/drei

    return (
      <>
        <mesh position={[x,y,z]}>
          <boxGeometry args={[1,1,1]} />
          <MeshWobbleMaterial
            color="red"
            speed={1.2}
            factor={0.6}
          />
        </mesh>
      </>
    )

  - give an example of MeshDistortMaterial from drei
    * see ./task/src/components/Task6/Task6.tsx

    - Read: explanation of the hooks we used in this task
      we used the "useCursor" from drei

      * useCursor is a hook provided by @react-three/drei that allows you to change the
        cursor style dynamically when hovering over interactive 3D elements in a
        r3f scene.

      e.g:
        useCursor(hovered); // Change cursor to a pointer when hovered, pointer is the default
        useCursor(hovered, "progress"); // Change cursor to "progress" (typically a spinning wheel)
        useCursor(hovered, "move");

7 useHelper hook from drei
  - talk about the useHelper hook
    * This is another useful hook from the drei package. Helpers in three.js are useful tools
      that provide visual aids to understand the structure and relationships of objects in 3D world

    * Instead of manually creating and adding helpers like AxesHelper, GridHelper e.t.c, you can
      use "useHelper" to add them dynamically

  - visualize axes using the AxesHelper
    use the component provided by r3f:
      <axesHelper args={[5]} />
      i.e: new THREE.AxesHelper(length) in raw 3.js
      -
      - here "args" is the length of the axes, we're creating an AxesHelper of length 5
      - you can also use the "scale" prop to make the axesHelper larger
      - You can't change the colors of AxesHelper easily — it's hardcoded in Three.js:
        X = red, Y = green, Z = blue;
        To customize colors, you'd need to make a custom helper or modify the geometry manually

    see an axesHelper with multiple props:
      <axesHelper 
        args={[10]}
        position={[0, 1, 0]}
        rotation={[0, Math.PI / 4, 0]}
        scale={[1, 2, 1]}
        visible={true} // or false
        name="myAxesHelper"
        onClick={(e) => console.log('Clicked helper', e)}
      />

  - visualize grids using the GridHelper
      use the component provided by r3f:
        <gridHelper position={[x,y,z]} args={[15]} scale={3} />
        -
        i.e: new THREE.GridHelper(size, divisions, colorCenterLine, colorGrid) in raw 3.js
        - size: total size of the grid (width and height)
        - divisions: number of divisions (number of grid lines)
        - colorCenterLine: color of the center line
        - colorGrid: color of the other lines

        in react-three-fiber, you'll do like this:
        <gridHelper args={[15, 15, 'white', 'gray']} /> i.e [size, divisions, colorCenterLine, colorGrid]

  - visualize light sources using any of the following:
    SpotLightHelper, PointLightHelper, DirectionalLightHelper
    -
    import * as THREE from "three"
    import {useHelper} from "@react-three/drei"

    const Cube = () => {
      const lightRef = useRef<THREE.Mesh>(null!)
      useHelper(lightRef, THREE.DirectionalLightHelper, 1)

      return (
        <group>
          <directionalLight ref={lightRef} position={[0, 2, 5]} intensity={Math.PI} />
          <mesh>...</mesh>
        </group>
      )
    }
    
  - visualize the bounding box of an object using the BoxHelper
    -
    import * as THREE from "three"
    import {useHelper} from "@react-three/drei"

    const Cube = () => {
      const meshRef = useRef<THREE.Mesh>(null!)

      // replace "red" with any color of your choice, you can also ask chatGPT for "args" on "sizes" of the BoxHelper
      useHelper(meshRef, THREE.BoxHelper, "red")

      return (
        <group>
          <mesh ref={meshRef}>...</mesh>
        </group>
      )
    }

7.1 see all examples at:
  ./task/src/components/Task7/Task7.tsx

8 Leva package
  - Talk about the leva package
    * Leva is a wonderful r3f package created by the same guys who created drei and r3f. The library
      helps to adjust the properties of objects and see the live changes of the properties in our
      scene
    * pnpm i leva

    * To use Leva, simply import useControls and use it anywhere in your app:
      import { useControls } from "leva"
      const { myValue } = useControls({ myValue: 10 })

  - Read: Example 1
    import { useControls } from 'leva'

    function MyComponent() {
      const { myValue } = useControls({ myValue: 10 })
      return myValue
    }

    function AnotherComponent() {
      const { anotherValue } = useControls({ anotherValue: 'alive!!' })
      return <div>Hey, I'm {anotherValue}</div>
    }

    function UnmountedComponent() {
      const { barValue } = useControls({ barValue: true })
      return barValue ? <div>Hello!</div> : null
    }

    function MyApp() {
      return (
        <>
          <MyComponent />
          <AnotherComponent />
        </>
      )
    }

    * Note that since UnmountedComponent is not mounted anywhere in our application,
      the control declared there will not be added to the GUI!

    * The order of the controls depends on hooks call order, in our case "myValue" will be first,
      followed by "anotherValue" and then "barValue"

  - Read: Conditionally show fields
    -
    const {check, myNumber, color} = useControls({
      check: false,
      myNumber: 4,
      color: {
        value: "#fff",
        render: (get) => get('check') && get('myNumber') > 5
      }
    })

    * The color input will show in the GUI only if check is true & myNumber is greater than 5

  - Read: Folders
    * Using a folder structure can be as easy as setting the name you want as the
      first parameter of useControls
    -
    const {showLighting, showStats} = useControls('My folder', {
      showLighting: true,
      showStats: false,
    })

  - Read: Nested folders
    * Say you want folders in your folders. For this we are going to need the folder function. 
      Using this method the object key becomes the folder name
    -
    import { folder, useControls } from 'leva'

    const { showLighting, showStats } = useControls('My folder', {
      lighting: folder({
        showLighting: true,
      }),
      'Show stats': folder({
        showStats: false,
      }),
    })

    * One thing to note is that all inputs used here are returned on the same level.
      So the state will look like:
      {showLighting: true, showStats: false}
      This means that having properties with the same names in different folders will cause conflicts

  - Read: Input Types
    :Number
      A single numerical input

      const { myNumber } = useControls({
        myNumber: 4,
      })

      Change the value by either dragging over the input label or the inner label

    :Range
      A Number input with a range slider. It will be used when you provide a min and max value
      const { myNumber } = useControls({
        myNumber: {
          value: 4,
          min: 0,
          max: 10,
          step: 1, // step is optional, tells leva how to increase/reduce the value
        },
      })

    :Color
      A color picker. Color format is inferred by the object used:
      -
      const {myFooColor, myBarColor} = useControls({
        myFooColor: '#fff',
        myBarColor: { r: 200, g: 106, b: 125, a: 0.4 },
      })
      -
      * In the example, "myFooColor" will create an Hexadecimal field while "myBarColor" will
        expose 4 values in separate r, g, b and a numerical fields

    :Boolean
      A simple toggle, used for checkboxes
      const { toggle } = useControls({ toggle: true })

    :Select
      A dropdown select input with a specified list of elements. An optional default value can be provided
      -
      const { presetColor } = useControls({
        presetColor: {
          options: ['red', 'green', 'blue', 'yellow'],
          value: 'red',
        }
      })

    :Interval
      An array containing two numerical values. Will be used when value is an array of 2
      numbers and min and max are specified
      -
      const { myInterval } = useControls({
        myInterval: {
          min: 0,
          max: 10,
          // initial value of 4, 5
          value: [4, 5],
        },
      })

    :Vector2
      * good stuff, but i don't see myself using it.

      * Compound input of two numerical values without min and max bounds. Will be used when value
        is an object with x and y properties or an array of two numbers

      * https://github.com/pmndrs/leva/blob/main/docs/inputs.md#vector2

    :Vector3
      * same as vector2. i don't see myself using it

      * https://github.com/pmndrs/leva/blob/main/docs/inputs.md#vector3

8.1 Leva challenge
  - use leva to control the lightColor and lightIntensity of a directionalLight
    -
    import {useControls} from 'leva'

    const LightComp = () => {
      const {color, intensity} = useControls('Light Folder', {
        color: "#fff",
        intensity: {
          value: Math.PI,
          min:1,
          max:20,
          step:0.5
        }
      })

      return (
        <directionalLight
          castShadow
          color={color}
          intensity={intensity}
          position={[x,y,z]}
        />
      )
    }

  - use leva to adjust the color and the args of a boxGeometry
    -
    import {useControls} from 'leva'

    const BoxComp = () => {
      const {xSize, ySize, zSize} = useControls({
        xSize: {value: 1.5, min: 1, max: 3, step: 0.25}
        ySize: {value: 1.5, min: 1, max: 3, step: 0.25}
        zSize: {value: 1.5, min: 1, max: 3, step: 0.25}
      })

      return (
        <mesh position={[x,y,z]}>
          <boxGeometry args={[xSize, ySize, zSize]} />
          <MeshWobbleMaterial color={"purple"} factor={0.8} speed={1.5} />
        </mesh>
      )
    }

  see ./task/src/components/Task8/Task8.tsx

