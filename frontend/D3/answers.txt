1.  - Read: What is D3
      D3 (Data Driven Document) allows you to bind data to DOM elements and apply data-driven transformations
      to the elements. it leverages HTML, SVG and CSS to render visualization

    - What are the 2 selection methods in D3
      d3.select() : selects the first matching element
      d3.selectAll() : selects all matching elements

    - task write:
        d3.select("body").style("background-color", "blue")
        d3.selectAll("div").style("color", "red")
        d3.select("p")
          .style("color", "pink")
          .attr("class", "active")
          .text("Hello D3")

2.  How do you append & remove elements to the DOM
        .append():
            d3.select(body)
              .append("div")
              .attr("class", "temporary")
              .html("New div added")
        
        .remove():
            d3.select("div.temporary").remove()

3.  Binding Data
    - Read: A little bit about Binding data
        D3 makes it easy to bind data to elements and create dynamic charts. you bind the data to DOM
        elements using the .data() method. it links the data to the elements in the DOM

    - task write: data = [10,20,30,40,50]
        d3.select("body").selectAll("p")
            .data(data)
            .text(d => `Value is ${d}`)
            .style("font-size", d => `${d}px`)

4.  From Question 3
    - what happens if there are only 2 <p> elements in the DOM
        If there are only 2 <p> elements in the DOM, D3 will only bind data to the existing 2 elements
        so the 1st <p> will be 10, the second <p> will be 20. The remaining data points (30,40,50)
        will be left unbound and effectively ignored in the DOM

    - how do you fix the issue where there the data values are more than the elements in the DOM
        you can fix the issue by using the .enter() and .append() methods to create new <p> elements.
        when you use this method, as D3 is looping through the data and attaching it to each respective
        element, if it gets to a data where the DOM element does not exist, it will use .enter & .append
        to create and attach a new DOM element for the data.
        -
        The newer way of doing .enter().append(<element>) is .join(<element>)

    - Task write: write the solution of the above using question 3 "task write"
        d3.select("body").selectAll("p")
            .data(data)
            .enter()
            .append("p")
            .text(d => `Value is ${d}`)
            .style("font-size", d => `${d}px`)

    - .join() replaces the .enter().append() & .exit().remove(), see how it us used:
        enter().append() is the classic way, works for (D3 v4 and earlier)
        .join() is a newer method in D3
        .join() automatically handles "enter", "update", and "exit" for you:
        e.g:
            g.selectAll("rect")
              .data(data)
              .join("rect") // ðŸ‘ˆ magic happens here
              .attr(...);

5.  .append() vs .join()
    - What is the difference btw .join() and .append()
        .join():
            it is used to create new DOM elements based on the data that is bound to a selection.
            When you bind data to a selection using .data, D3 creates a enter method for any data points
            that do not correspond to an existing DOM element. So you can use .join() to create DOM
            elements for those new data points

        .append():
            also used to add new elements to the DOM, but .append by itself does not deal with data Binding
            (i.e it doesn't automatically create elements for unmatched data). it simply appends an element
            to the selected element

    - .join task write: data: [1,2,3,4]
        const circles = d3.select("svg").selectAll("circle").data(data)
        circles.join("circle")
                .attr("cx", (d,i) => (i * 50 + 25)) // uses the index for x position on each circle
                .attr("cy", 50)
                .attr("r", 20)

    - .append task:
        const svg = d3.select("svg")
        svg.append("circle")
            .attr("cx",50)
            .attr("cy", 50)
            .attr("r", 20)
            .attr("fill", "blue")

6.  SVG and D3
    const data = [30, 70, 110, 150]
    const svg = d3.select("body").append("svg")
                    .attr("width", 400)
                    .attr("height", 400)
    
    svg.selectAll("circle").data(data)
        .join("circle")
        .attr("cx", (d,i) => (i * 90 + 30)) // set the x position of the circle based on the index of each data
        .attr("cy", 50)
        .attr("r", d => d)
        .attr("fill", "pink")

7. Scale functions
    - Read: a little bit about scale functions
        scale in D3 allows you you to map data values to visual values (like pixel positions or colors).
        common scales include linear scales. 

    - give an example of a .scaleLinear() function using input:[0,100] and output:[0,500]
        const scale = d3.scaleLinear()
                        .domain([0,100]) // input range (i.e your data range)
                        .range([0,500]) // output range (i.e your visual range)

        const yAxis = svg.append("g").attr("id", "yAxis")
                        .call(d3.axisLeft(scale))

        const xAxis = svg.append("g").attr("id", "xAxis")
                        .call(d3.axisBottom(scale))

    - Read: see an example where it was used & rewrite
        d3.select("svg").append("rect")
            .attr("x", scale(50)) // mapping data value 50 to a pixel position. output will be = 250
            .attr("width", 50)
            .attr("height", 50)
            .attr("fill", "orange")

8. Scale functions and Axes
    - talk about scaleLinear and scaleBand
        scaleLinear:
            is used for **continuous data** â€” when you have numeric data that spans a continuous range
            (like measurements, counts, or any value that could take any number within a given range)

        scaleBand:
            the scale function is used for categorical data, where you have a finite set of distinct
            categories or groups (e.g., names of items, countries, months, etc.)
            scaleBand scales the band in the .domain() to match the value in .range() & each "band"
            represents a category (or a group), and the bands are shared equally along the domain

    - give examples of scaleLinear and scaleBand
        scaleLinear:
            const xScale = d3.scaleLinear()
                .domain([0, 100])  // Input range
                .range([0, 500]);  // Output range

            console.log(xScale(50)); // Outputs: 250

            const xAxis = d3.axisBottom(xScale);
            d3.select("svg")
                .append("g")
                .attr("transform", "translate(50,250)")
                .call(xAxis);

        scaleBand:
            const xScale = d3.scaleBand()
                .domain(["A","B","C","D","E"])
                .range([0, 1000])

            console.log(xScale("A")); // Outputs: 0
            console.log(xScale("B")); // Outputs: 250
            console.log(xScale("C")); // Outputs: 500

            // use the xScale to create xAxis
            d3.select("svg")
                .append("g")
                .attr("transform", "translate(0,500)")
                .call(
                    d3.axisBottom(xScale)
                );

8.1 I asked chatGPT a question, see the question and answer
    -
    - d3.select("svg").append("g")
        .attr("transform", "translate(50,250)") // move the group element <g>
        .call( d3.axisBottom(xScale) );

    - i asked, can i still do:
        d3.select(svg).append(g).attr(x, 50).attr(y, 250)?
        -
        i wanted to know if i could replace "transform" with "x & y" in moving the group

    Answer:
        Yes, you can use d3.select(svg).append("g").attr("x", 50).attr("y", 250) as an alternative to
        the transform method, but thereâ€™s a key distinction to keep in mind.
        -
        - Using transform: .attr("transform", "translate(50, 250)")
          This moves the entire group (<g>) element by 50 units along the x-axis and 250 units along the y-axis.
          It applies a transformation, so everything inside that group will be shifted by those amounts.
        -
        - Using x and y attributes:
          The x and y attributes don't work in the same way on a <g> element. These attributes are generally
          used for positioning elements like <rect>, <circle>, or <text>, but not for <g>. So, if you
          try to set x and y attributes on a <g>, youâ€™ll likely not see any effect

9. Transitions & Animations
    d3.selectAll("circle")
        .attr("cx", "0")
        .attr("r", "0")
        .attr("fill", "yellow")
        .transition()
        .duration(1000)
        .delay((data, index) => index * 100 ) // 100ms
        .attr("cx", 300) // x-axis position of the circle
        .attr("r", 50) // radius of the circle
        .attr("fill", "blue") // color of the circle

    - Read: some explanations
        - .transition(): Creates an animation.
        - .duration(): Specifies the transition duration.
        - .attr() / .style(): All .attr & .style after .transition will be animated over the duration specified

10. Handling Events
    d3.select("circle")
        .on("mouseenter", function(this: SVGElement, event, d) {
            console.log("Mouse entered:", event, d);

            d3.select(this)
              .transition()
              .duration(300)
              .attr("fill", "blue");
        })
        .on("mouseleave", function(this: SVGElement, event, d) {
            console.log("Mouse left:", event, d);

            d3.select(this)
              .transition()
              .duration(300)
              .attr("fill", "green");
        });


