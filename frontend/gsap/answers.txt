1.  
    - what methods do you use to animate when working with gsap
        we have 3 primary methods for Animating in gsap:
        - gsap.from
            gsap.from(selector, {x:"50px", y:-50, duration:1})

        - gsap.to
            gsap.to(selector, {x:100, y:100, color:'orange', duration:1})

        - gsap.fromTo
            gsap.fromTo(
                selector,
                {x:0, y:0, opacity:0, scale:.2},
                {x:50, y:50, opacity:1, scale:1.5, duration:.5, ease:"easeInOut"}
            )

    - gsap timeline with an example
        const tl = gsap.timeline({
            defaults: {
                duration: 1.5
            }
        })

        tl.from(".anim1", {y: -50, stagger:.6, opacity:0})
          .to("rule", {color:"red", cssRule: {scaleY:0}, duration:1}, "-=2.2")
          .from("aside", {backgroundPosition:"300px 0px", y: 30, opacity:0, delay:1.4}, "-=1")
          .from("img", {y: 30, opacity:0, delay:1.4}, 2.5)

        # explaining the timings
        -=2.2 := This is a relative timing, it is telling gsap to start the animation 2.2s before the
                previous animation comes to an end
        -=1 := This is also a relative timing, it tells gsap to start the animation 1s before the
                previous animation comes to an end
        2.5 := This is an absolute timing, it tells gsap to start the animation 2s after the overall
            timeline animation kicked off, so this one is not relative to any of it's siblings,
            but instead it is relative to the timeline & the timeline duration 

    - talk about gsap.set()
        gsap.set() is used to update the property of element without any animations
        e.g:
            gsap.set("element", {zIndex:4, opacity:1, color: "green", fontSize:"30px"})
            -
            it just like jQuery $("element").css({}).. the element is not animated to the received values,
            but the element properties will be updated to the values received

        - using it to change the innerText of an element
            gsap.set("element", {text: "GOD is good"})
            gsap.set("element", {text: function () {
                // do whatever you like inside the function, but return a string value
                return "Am so grateful for another chance"
            }})


    - Read: See how to use gsap timeline to animate an svg element


2.  - animate ".anim1" to its current state, using an initial state of:
        gsap.from(".anim1", {opacity:0, y:-50, stagger:.6, duration:1})

    - animate an "image element" to its current state, using an initial state of:
        gsap.from("img.product", {opacity:0, y:30, delay:1.4, duration:1})

    - animate an "aside element" from its current state to a new state,
      let the new state be: opacity:1, background-position:"300px 0px"
      delay by 1.1s & duration of 1s