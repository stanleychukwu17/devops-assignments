1.  
    - what methods do you use to animate when working with gsap
        we have 3 primary methods for Animating in gsap:
        - gsap.from
            gsap.from(selector, {x:"50px", y:-50, duration:1})

        - gsap.to
            gsap.to(selector, {x:100, y:100, color:'orange', duration:1})

        - gsap.fromTo
            gsap.fromTo(
                selector,
                {x:0, y:0, opacity:0, scale:.2},
                {x:50, y:50, opacity:1, scale:1.5, duration:.5, ease:"easeInOut"}
            )

    - gsap timeline with an example
        const tl = useRef(null)

        const tl.current = gsap.timeline({
            defaults: {
                duration: 1.5
            }
        })

        tl.current.from(".anim1", {y: -50, stagger:.6, opacity:0})
          .to("rule", {color:"red", cssRule: {scaleY:0}, duration:1}, "-=2.2")
          .from("aside", {backgroundPosition:"300px 0px", y: 30, opacity:0, delay:1.4}, "-=1")
          .from("img", {y: 30, opacity:0, delay:1.4}, 2.5)

        # explaining the timings
        -=2.2 := This is a relative timing, it is telling gsap to start the animation 2.2s before the
                previous animation comes to an end
        -=1 := This is also a relative timing, it tells gsap to start the animation 1s before the
                previous animation comes to an end
        2.5 := This is an absolute timing, it tells gsap to start the animation 2s after the overall
            timeline animation kicked off, so this one is not relative to any of it's siblings,
            but instead it is relative to the timeline & the timeline duration 

    - gsap timeline scaling, reversing, pausing and playing of a timeline animation
        const button = document.querySelector(".button")
        button.addEventListener("click", ()=> {
            tl.timeScale(3) // this will make the reverse 3x faster
            tl.reverse()
            -
            tl.pause()
            tl.play()
        })

        you can also do:
        document.querySelector(".button").addEventListener("click", () => {
            tl.reversed() ? tl.play() : tl.reverse()
        })

    - when using useEffect for timeline animations, how do you stop the animation incase of state change
        you have to do: tl.current && tl.current.progress(0).kill()
        e.g:
            const el = useRef()
            const q = gsap.utils.selector(el)
            const [openBox, setOpenBox] = useState<boolean>(false)

            useEffect(() => {
                tl.current.progress(0).kill()

                if (openBox) {
                    tl.current.to(q(".box"), {opacity:1, x:0})
                } else {
                    tl.current.to(q(".box"), {opacity:0, x:-100})
                }
            }, [openBox])

    - talk about gsap.set()
        gsap.set() is used to update the property of element without any animations
        e.g:
            gsap.set("element", {zIndex:4, opacity:1, color: "green", fontSize:"30px"})
            -
            it just like jQuery $("element").css({}).. the element is not animated to the received values,
            but the element properties will be updated to the values received

        - using it to change the innerText of an element
            gsap.set("element", {text: "GOD is good"})
            gsap.set("element", {text: function () {
                // do whatever you like inside the function, but return a string value
                return "Am so grateful for another chance"
            }})

2.  
    - animate ".anim1" to its current state, using an initial state of:
        gsap.from(".anim1", {opacity:0, y:-50, stagger:.6, duration:1})

    - animate an "image element" to its current state, using an initial state of:
        gsap.from("img.product", {opacity:0, y:30, delay:1.4, duration:1})

    - animate an "aside element" from its current state to a new state,
        gsap.fromTo(
            "aside",
            {opacity:0, backgroundPosition: "200px 50px},
            {opacity:1, backgroundPosition: "300px 0px", delay:1.1, duration:1}
        )

3. Read: See how to use gsap timeline to animate an svg element
    -> see: ./images/3-svg-card
    // in this example, we will be animating an svg card
    const tl = gsap.timeline({
        defaults : {duration: .7, ease: "Back.easeOut.config(2)", opacity:0}
    })

    tl.from(".card-bg", {delay:1, scale:.2, transformOrigin: 'center'}, "=.2")
        .from(".card-top", {scaleY:0, transformOrigin: 'top'})
        .from(".icon", {scale:.2, transformOrigin: 'center'}, "-=.7")
        .from(".blip1", {scaleX:0})
        .from(".blip2", {scaleX:0}, "-=.2")
        .from(".blip3", {scaleX:0}, "-=.3")
        .from(".blip4", {scaleX:0}, "-=.5")
        .from(".blip5", {scaleX:0}, "-=.7")

    // we another timeline to animate the whole card, we want the card to continue to go up and down infinitely
    var tl2 = gsap.timeline({defaults:{duration:1.5, delay:1}})
    tl2.to(".whole-card", {y:10, repeat:-1, yoyo:true})

4.  Read: using CssRule plugin to animate pseudo elements/selectors
        -
        import gsap from 'gsap';
        import { CSSRulePlugin } from 'gsap/CSSRulePlugin';

        // Register the plugin
        gsap.registerPlugin(CSSRulePlugin);

        useEffect(() => {
            // animating the ":hover" effect of a button
            const buttonRule = CSSRulePlugin.getRule('.my-button:hover');
            gsap.to(buttonRule, {duration: 0.3, backgroundColor: 'red', color: 'white'});

            // animate the pseudo selector of ":after"
            const spanAfter = CSSRulePlugin.getRule("span:after")
            gsap.to(spanAfter, {cssRule:{scaleY:0}, duration:1})
        }, []);

5.
    - using the useRef, animate an element state to rotate 360
        const boxRef = useRef(null)

        useEffect(() => {
            gsap.fromTo(boxRef.current, {opacity:0, x:-100} {opacity:1, x:0, duration:0.5})
            // delay until the last animation is done
            gsap.to(boxRef.current, {rotation:"+360"})
        }, [])

        <div ref={boxRef}></div>

    - Read: targeting descendant elements using gsap.utils.selector {Read and do on your own}
        e.g:
        import {useEffect, useRef} from "React"

        const Box = ({}) => {
            return <div className="box"{children}></div>
        }

        const Container = () => {
            return (
                <div>
                    <Box>item 1</Box>
                    <Container />
                    <Box>item 2</Box>
                </div>
            )
        }

        function App () {
            const el = useRef(null)
            const q = gsap.utils.selector(el)

            useEffect(() => {
                // this will target all ".box" elements, no matter how deep they are in the DOM
                // it uses el.current.querySelectorAll() under the hood
                gsap.to(q(".box"), {x:100, stagger:0.3, repeat:-1, repeatDelay:1, yoyo:true})
            }, [])

            return (
                <div className="app" ref={el}>
                    <Box>From Parent 1</Box>
                    <Container />
                    <Box>From Parent 2</Box>
                </div>
            )
        }

6.
    - Animating on change of state

    - Animating on interaction
    - Read: cleaning up {before you read, what can you say about cleaning up}




