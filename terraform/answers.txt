1. The terraform core workflow is
    Write:
    Plan:
    Apply

2.  terraform is nothing without providers, every terraform project, you need to specify a provider, there are providers
    for every major cloud infrastructure platform, these providers can be compared to you nodejs packages,
    in these providers are the code that will be used to provision your infrastructure

3.
    terraform {
        required_providers {
            aws = {
                source = "hashicorp/aws"
                version = "~>5.0"
            }
        }
    }

    provider "aws" {
        region = "eu-north-1"
        access_key = ""
        secret_key = ""
    }

4.
    resource "aws_vpc" "main" {
        cidr_block = "10.0.0.0/16"
        enable_dns_support = true
        enable_dns_hostname = true
    }

    resource = is a block
    cidr_block, enable_dns_hostname, enable_dns_support = arguments
    aws_vpc, main = label names

5. terraform init - this will download all of the required_providers

6. VPC -> Subnet -> Route table & Internet Gateway -> Security groups -> EC2 instance

7. resource <provider_resource_name> <local_name> { ...arguments }

8. Classless Inter Domain Routing

9.
    resource "aws_vpc" "main" {
        cidr_block = var.vpc_cidr_block
        enable_dns_hostname = true
        enable_dns_support = true

        tags = {
            Name = "Dev Env ${var.main_vpc_name}"
        }
    }

10. - terraform plan
    - terraform apply
    - terraform plan -out=tfplan or terraform plan -out tfplan
    - terraform apply "tfplan"

11. - terraform apply -auto-approve
    - terraform fmt
    - terraform fmt <name_of_folder>
      terraform fmt -diff
      terraform fmt -recursive
    - terraform validate

12. - terraform destroy
    - terraform destroy -auto-approve
    - terraform destroy -target "aws_vpc.main"
    - terraform apply -replace="aws_vpc.main"
