Group 1
1. docker build -t <image_name> <path_to_locate_dockerfile>
    e.g docker build -t python_image ./

2. docker build -t <image_name>:<tag> <path_to_locate_dockerfile>
    e.g docker build -t python_image:v1.0 ./

3. docker images
    docker image ls

5. docker image rm <image_name>
    docker rmi <image_name>

6. docker image rm image_1 image_2 image_3 {...}

7. docker image rm $(docker image ls -q)
    docker rmi $(docker images -q)
    --
    docker image prune -f {Remove all dangling images (-f = by force (without confirmation))}
    docker image prune -a {Remove all unused images (with confirmation):}
    docker image prune -a -f {Remove all unused images (without confirmation):}

8.  - COPY package.json package-lock.json pnpm-lock.yml ./
    - COPY package*.json ./ {
        COPY *.txt *(.js|.ts) picture* ./
        The COPY instruction in Docker does not support advanced pattern matching or glob patterns like *, ?, or complex regex patterns directly.
    }
    - COPY ["file with space.txt", "."]
    - COPY . ./
    - ADD and COPY commands both carry out the same task, but the ADD command can do a little bit more {
        1. ADD can copy from a url e.g ADD https://github.com/stanley/come.txt ./
        2. ADD can copy from a zipped file into your working directory e.g ADD code.tar ./,
         and it will unzip the file content and copy the contents
    }
9. RUN addgroup app && adduser -S -G app app {
    you must put -S before -G, it is the correct way of doing it, you're saying create a -S system user called
    "app" and add the user to a group -G called "app"
}
10. USER app
11. COPY --chown=app:app . ./
    RUN chown -R app:app /app
    {
        Use COPY --chown=app:app . ./ when you are copying files and want to set their ownership in one step.
        Use RUN chown -R app:app /app when you need to change the ownership of files or directories that are
        already present in the image from previous layers or build steps.

        chown = stands for "change owner"
        -R = This flag stands for "recursive"
        app:app = This specifies the new owner and group for the files.
                The first app refers to the username, and the second app refers to the group name.
        /app = The command will change the ownership of /app and all files and subdirectories within /app

        chatGPT say better to do: "RUN chown -R app:app /app" than: "RUN chown -R app:app ./"
    }




Group 2.
1.  1a - CMD npm run dev
        runs a command, i.e "npm run dev". but it starts a new shell session to run this command
    1a - CMD ["npm", "run", "dev"]
        this is better as it does not spin up any new shell session
    1b - An alternative to CMD is ENTRYPOINT, e.g ENTRYPOINT ["npm", "run", "dev"].
        the difference is the CMD command can be over-ridden when starting the container, while
        that of ENTRYPOINT cannot be over-ridden

2.  docker login
    docker tag <image_name>:tag <username>/<myRepo>:<tag>
    docker push <username>/<myRepo>:<tag>
    https://hub.docker.com/r/username/myapp - to verify that the image has been pushed

3. docker run -d --name react_container -p 3000:3000 react_image:latest (or)
    docker run -d --name=react_container -p 3000:3000 react_image:latest

4.  a. docker run -it \
        --name postgres \
        -v ${PWD}/pg_data:/var/lib/postgresql/data \
        -e POSTGRES_PASSWORD=password \
        -p 5432:5432 \
        postgres:latest
    b. docker container ls (-a)
        docker ps (-a)

5.  0. docker logs CONTAINER_ID_or_NAME = show all logs
    a. docker logs -f CONTAINER_ID_or_NAME
    b. docker logs --tail 100 my_container {shows last 100 logs}
    c. docker logs -f -t my_container (or) docker logs -ft my_container

6.  1. docker exec -it my_container ls
    2. docker exec -it my_container mkdir /path/to/new_directory
    3. docker exec -it my_container sh

7. docker exec -it my_container sh (or) docker exec -it my_container shell
    for ubuntu based system, or ubuntu based image you can do:
    docker exec -it my_container bash

8. docker attach CONTAINER_ID_or_NAME
    note this attaches to the main process as its own user, not as root unless the main process is running as root.
    For attaching to a running shell as root:
    docker exec -it -u root CONTAINER_ID_or_NAME /bin/bash
    (or)
    docker exec -it -u root CONTAINER_ID_or_NAME /bin/sh {where -u == --user}

9.  - docker rm -f CONTAINER_ID_or_NAME
    - docker rm -f $(docker ps -aq)

10. volumes are a way to persist data generated by Docker containers. They are separate from the container's
    filesystem and exist outside the container's lifecycle, making them ideal for storing persistent or shared data.
    - docker volume create <my_volume>
    - docker volume ls
    - docker volume inspect <my_volume>
    - docker volume rm -f <my_volume>
    1. {
        bind mount: this volume is not managed by docker, it binds a directory from the host machine into a docker container
            e.g docker run -d --name my_container -v /host/path:/container/path my_image
        named volume: is managed by docker, it stores the volume in an area managed by docker, it is usually faster and
            better than bind mount.
            e.g docker run -d --name <my_container> -v my_volume:/path/in/container <my_image>
    }
    2. {
        docker run -d \
            --name postgres_container
            -p 5432:5432
            -v ${PWD}/pg_data:/var/lib/postgresql/data \ or
            -v pg_data:/var/lib/postgresql/data \ or
            -e POSTGRES_PASSWORD=password \
            postgres:latest
    }
    3. {
        docker run -it --name my_node_app -v ${PWD}:/usr/src/app -w /usr/src/app node:14 bash
        ---
        to prevent it from bind mounting the node_modules folder, we do:
        docker run -it \
            --name my_node_app \
            -v ${PWD}:/usr/src/app \
            -v /usr/src/app/node_modules \
            -w /usr/src/app \
            node:14 \
            bash

        -v /usr/src/app/node_modules: Mounts an anonymous volume on-top of /usr/src/app/node_modules, effectively
            hiding the node_modules directory from your host. This setup ensures that the container uses its own
            node_modules directory, preventing any changes from affecting your local node_modules.

        -w /usr/src/app: Sets the working directory inside the container to /usr/src/app.
    }


Group 3
1.  docker cp <container_id>:/path/to/file/in/container /path/on/your/local/system
    e.g docker cp container_id:/app/file.txt /home/user/local-folder/
    ---
    docker cp /path/on/your/local/system <container_id>:/path/in/container
    e.g docker cp /home/user/local-folder/file.txt <container_id>:/app/

2.  docker system prune -f
    docker container prune -f
    docker volume prune
    docker network prune -f
    docker image prune -f
    ---
    docker rm -f $(docker ps -aq) # for containers
    docker volume rm -f $(docker volume ls) # for volumes
    docker network rm -f $(docker network ls) # for networks
    docker rmi -f $(docker image ls -q) # for images

3.  answers:
    react & node.js: see the answer in "react" folder. the "Dockerfile_for_react"
