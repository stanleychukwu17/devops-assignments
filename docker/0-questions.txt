- write a full Dockerfile for a backend node app, React app, Golang app and compare your's with the teachers Dockerfile
- Build an image with out a tag (i.e <image_name>:<tag>)
- Build an image with a tag (i.e <image_name>:<tag>)
- List all images you've created
- create 5 images using one Dockerfile, but let all images have different names
- delete an image
- delete multiple images
- delete all images
- what can you say about using the COPY command {
    copy multiple files
    using regex in package.json copy
    copy files with white space in their names
    copying everything
}
- create a group and create a user, then add the user to the group created using the RUN command
- make the user you just created the default user
- tell us about the CMD command, how do you use it and what are the alternatives to CMD command, explain the diff btw CMD and it's alternatives
- how do you push an image to docker hub?
- run a container in a detached mode
- run a container in an interactive mode {
    run a container with all the params you know {name, port, environment, volumes}
    list all the containers using 2 different commands
    list all the containers both running and stopped containers
}
- logs in a container? follow logs in a container and show the timestamp for each logs
- execute three commands in a running container {1. ls, 2. mkdir, 3. sh}
- execute a shell in an interactive mode in a running container
- use the docker attach command to attach to a running container
- remove a docker container - use the 2 methods available
- docker volume, everything you know about it and it's command {
    1. tell me the difference btw a bind and mount volume
    2. do the both of them while starting a postgres container using a postgres image from docker hub
    3. how do you map your current workspace into the container using volumes, so that you can see live changes in your container
}
- copy a file from docker to your system and do vice-versa
- Cleaning up your workspace {
    1. using prune
    2. recursively using rm --p60
}
- convert the JSON Object to a yaml syntax - using the image in this directory "json_to_yaml.png"
- Create a docker-compose.yml file for these services {
    frontend, backend, db using postgres | mysql
}
- build images from the compose file created {
    1. don't use --no-cache
    2. use --no-cache
    3. see the list of images created
}
-. using the compose file, start the containers {
    1. see the list of containers from this compose file
    2. stop the running containers for only this compose file
    3. re-write the docker-compose.yml file into a json file
}