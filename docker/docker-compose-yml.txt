version: "3.8" {depending on your docker engine}
services: -{Object}
    <name_of_service>: -{Object}
        images: postgres:16.3-alpine3.20        {use this when you want to build an image off of an image from the docker hub}
        build: ./backend or ./server            {this is telling docker where should it find the Dockerfile file that it will use to build the image, and the path is relative to the docker-compose.yml file}

        container_name: <name_of_container>
        restart: always                         {
            The restart: always directive in Docker Compose specifies a restart policy for a container. When set to always, it means that Docker will automatically restart the container if it stops for any reason, such as a crash or manual stop.

            Here's what restart: always does:
            1. Automatic Restart: If the container stops for any reason, Docker automatically restarts it.
            2. High Availability: Ensures high availability of the service by automatically bringing it back online in case of failure.
            3. Fault Tolerance: Helps maintain service continuity by quickly recovering from failures without manual intervention.

            This option is commonly used for critical services or those that need to be highly available. However, it's important to note that using restart: always can mask underlying issues, so it's essential to monitor the container's behavior and investigate the cause of frequent restarts if they occur.
        }
    
        depends_on: -[Array]                    {A list of the <name_of_image> that this current image depends on, so this one will wait for that one to be completed before it is built}
            - db
            - backend

        ports: -[Array]
            - "4000:4000" or "8080:3000"

        volumes: -[Array]
            - ./api:/app                        {binding mount for live changes}
            - ./logs:/app/logs                  {binding mount for storing data}
            - users-data:/app/data/users-data   {named volume}

        environment: -{Object}
            POSTGRES_USER: <username>
            POSTGRES_PASSWORD: <password>
            POSTGRES_DB: <database>
            or
            - POSTGRES_USER=<username>
            - POSTGRES_PASSWORD=<password>
            - POSTGRES_DB=<database>

        hostname: <name_of_service> or <your_own_custom_name> {if you do not specify a hostname, docker will use <name_of_service> as the default hostname}

        networks:                               {if you want to use a custom network}
            - <myNetwork>

        command: ./docker-entrypoint.sh         {The command runs once the container has been started}

        stdin_open: true                        {if true, a bash/sh terminal will be open separately for this container}
        tty: true                               {if true, the above terminal opened will be interactive and will be able to take input and return outputs}

        deploy:                                 {i know nothing about this for now, but later on, i will research on the topic and provide you a more detailed explanation}
            restart_policy:
                condition: on-failure
volumes:
    users-data:
    {
        the volumes section is used to define named volumes that can be referenced by services in the services section. These named volumes are created and managed by Docker itself.
        The line above `users-data` is defining a named volume. These named volumes are just placeholders, and their values are not specified in the docker-compose.yml file. Docker Compose automatically creates volumes with these names when you bring up the Docker services defined in the services section that reference them.
    }

networks:       {define your custom networks here and tell it what you want it to be}
  <myNetwork>:
    driver: bridge